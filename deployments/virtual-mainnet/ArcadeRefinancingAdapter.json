{
  "address": "0x6Addd7dEA9AB5A268425bA643283b338D2F80E7B",
  "abi": [
    {
      "inputs": [],
      "name": "transferBorrowerRoleFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTEREST_RATE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_loanContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_loanIdentifier",
          "type": "uint256"
        }
      ],
      "name": "getBorrowerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_loanContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_loanIdentifier",
          "type": "uint256"
        }
      ],
      "name": "getCollateral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "proratedInterestRate",
          "type": "uint256"
        }
      ],
      "name": "getInterestAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_loanContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_loanIdentifier",
          "type": "uint256"
        }
      ],
      "name": "getPayoffDetails",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_loanContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_loanIdentifier",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_payBackToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_payBackAmount",
          "type": "uint256"
        }
      ],
      "name": "payOffRefinancable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repaymentController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_loanContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_loanIdentifier",
          "type": "uint256"
        }
      ],
      "name": "transferBorrowerRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x56e857aec8a84cd49cd125a93635717ad24f45867479fa569a887f4b887d3760",
  "receipt": {
    "to": null,
    "from": "0xA0711ec898Ee01EF5E3Db7db6D236aed56467844",
    "contractAddress": "0x6Addd7dEA9AB5A268425bA643283b338D2F80E7B",
    "transactionIndex": 0,
    "gasUsed": "638095",
    "logsBloom": "0x
    "blockHash": "0x13e61d225f60268161b03470ce076f5119ffd91e58470358a5fb77accab480e1",
    "transactionHash": "0x56e857aec8a84cd49cd125a93635717ad24f45867479fa569a887f4b887d3760",
    "logs": [],
    "blockNumber": 21286158,
    "cumulativeGasUsed": "638095",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7e8ec3a88d600f75f08e1b047d7f61d1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"transferBorrowerRoleFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTEREST_RATE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loanContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_loanIdentifier\",\"type\":\"uint256\"}],\"name\":\"getBorrowerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loanContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_loanIdentifier\",\"type\":\"uint256\"}],\"name\":\"getCollateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proratedInterestRate\",\"type\":\"uint256\"}],\"name\":\"getInterestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loanContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_loanIdentifier\",\"type\":\"uint256\"}],\"name\":\"getPayoffDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loanContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_loanIdentifier\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payBackToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_payBackAmount\",\"type\":\"uint256\"}],\"name\":\"payOffRefinancable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repaymentController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loanContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_loanIdentifier\",\"type\":\"uint256\"}],\"name\":\"transferBorrowerRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"NFTfi\",\"details\":\"This contract is an implementation of the IRefinancingAdapter for the Arcade platform. It handles operations related to refinancing Arcade loans such as transferring the borrower role, paying off loans, and retrieving loan and collateral details.\",\"kind\":\"dev\",\"methods\":{\"getBorrowerAddress(address,uint256)\":{\"details\":\"Gets the address of the borrower for a specific Arcade loan.\",\"params\":{\"_loanContract\":\"The address of the contract containing the Arcade loan.\",\"_loanIdentifier\":\"The unique identifier for the Arcade loan.\"},\"returns\":{\"_0\":\"The address of the borrower.\"}},\"getCollateral(address,uint256)\":{\"details\":\"Gets the collateral information for a specific Arcade loan.\",\"params\":{\"_loanContract\":\"The address of the contract containing the Arcade loan.\",\"_loanIdentifier\":\"The unique identifier for the Arcade loan.\"},\"returns\":{\"_0\":\"nftCollateralContract nftCollateralId The address of the collateral token contract and the ID of the collateral.\"}},\"getInterestAmount(uint256,uint256)\":{\"details\":\"Interest and principal must be entered with 18 units of      precision from the basis point unit (e.g. 1e18 == 0.01%)\",\"params\":{\"principal\":\"Principal amount in the loan terms.\",\"proratedInterestRate\":\"Interest rate in the loan terms, prorated over loan duration.\"},\"returns\":{\"_0\":\"interest                             The amount of interest due.\"}},\"getPayoffDetails(address,uint256)\":{\"details\":\"Gets the collateral information for a specific Arcade loan.\",\"params\":{\"_loanContract\":\"The address of the contract containing the Arcade loan.\",\"_loanIdentifier\":\"The unique identifier for the Arcade loan.\"},\"returns\":{\"_0\":\"loanERC20Denomination maximumRepaymentAmount  The address of the payoff token and the required payoff amount.\"}},\"payOffRefinancable(address,uint256,address,uint256)\":{\"details\":\"Pays off an Arcade loan with a specified amount of a specified token.\",\"params\":{\"_loanContract\":\"The address of the contract containing the Arcade loan.\",\"_loanIdentifier\":\"The unique identifier for the Arcade loan.\",\"_payBackAmount\":\"The amount of tokens used to pay back the Arcade loan.\",\"_payBackToken\":\"The token used to pay back the Arcade loan.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation was successful.\"}},\"transferBorrowerRole(address,uint256)\":{\"details\":\"Transfers the borrower role to this contract for a specific Arcade loan.\",\"params\":{\"_loanContract\":\"The address of the contract containing the Arcade loan.\",\"_loanIdentifier\":\"The unique identifier for the Arcade loan.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation was successful.\"}}},\"title\":\"ArcadeRefinancingAdapter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getInterestAmount(uint256,uint256)\":{\"notice\":\"Calculate the interest due over a full term.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/refinancing/refinancingAdapters/ArcadeRefinancingAdapter.sol\":\"ArcadeRefinancingAdapter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":900},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/refinancing/refinancingAdapters/ArcadeRefinancingAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\nimport {IRefinancingAdapter} from \\\"./IRefinancingAdapter.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IArcadeLoanCore} from \\\"./arcade/IArcadeLoanCore.sol\\\";\\nimport {IRepaymentController} from \\\"./arcade/IRepaymentController.sol\\\";\\nimport {InterestCalculator} from \\\"./arcade/InterestCalculator.sol\\\";\\n\\n/**\\n * @title ArcadeRefinancingAdapter\\n * @author NFTfi\\n * @dev This contract is an implementation of the IRefinancingAdapter for the Arcade platform.\\n * It handles operations related to refinancing Arcade loans such as transferring the borrower role,\\n * paying off loans, and retrieving loan and collateral details.\\n */\\ncontract ArcadeRefinancingAdapter is IRefinancingAdapter, InterestCalculator {\\n    address public constant repaymentController = 0x74241e1A9c021643289476426B9B70229Ab40D53;\\n\\n    error transferBorrowerRoleFailed();\\n\\n    /**\\n     * @dev Gets the address of the borrower for a specific Arcade loan.\\n     * @param _loanContract The address of the contract containing the Arcade loan.\\n     * @param _loanIdentifier The unique identifier for the Arcade loan.\\n     * @return The address of the borrower.\\n     */\\n    function getBorrowerAddress(\\n        address _loanContract,\\n        uint256 _loanIdentifier\\n    ) external view override returns (address) {\\n        return IERC721(IArcadeLoanCore(_loanContract).borrowerNote()).ownerOf(_loanIdentifier);\\n    }\\n\\n    /**\\n     * @dev Transfers the borrower role to this contract for a specific Arcade loan.\\n     * @param _loanContract The address of the contract containing the Arcade loan.\\n     * @param _loanIdentifier The unique identifier for the Arcade loan.\\n     * @return A boolean value indicating whether the operation was successful.\\n     */\\n    function transferBorrowerRole(address _loanContract, uint256 _loanIdentifier) external override returns (bool) {\\n        IERC721 borrowerNote = IERC721(IArcadeLoanCore(_loanContract).borrowerNote());\\n        address borrower = borrowerNote.ownerOf(_loanIdentifier);\\n        borrowerNote.transferFrom(borrower, address(this), _loanIdentifier);\\n        if (borrowerNote.ownerOf(_loanIdentifier) != address(this)) revert transferBorrowerRoleFailed();\\n        return (true);\\n    }\\n\\n    /**\\n     * @dev Pays off an Arcade loan with a specified amount of a specified token.\\n     * @param _loanContract The address of the contract containing the Arcade loan.\\n     * @param _loanIdentifier The unique identifier for the Arcade loan.\\n     * @param _payBackToken The token used to pay back the Arcade loan.\\n     * @param _payBackAmount The amount of tokens used to pay back the Arcade loan.\\n     * @return A boolean value indicating whether the operation was successful.\\n     */\\n    function payOffRefinancable(\\n        address _loanContract,\\n        uint256 _loanIdentifier,\\n        address _payBackToken,\\n        uint256 _payBackAmount\\n    ) external override returns (bool) {\\n        IERC20(_payBackToken).approve(_loanContract, _payBackAmount);\\n        IRepaymentController(repaymentController).repay(_loanIdentifier);\\n        return (true);\\n    }\\n\\n    /**\\n     * @dev Gets the collateral information for a specific Arcade loan.\\n     * @param _loanContract The address of the contract containing the Arcade loan.\\n     * @param _loanIdentifier The unique identifier for the Arcade loan.\\n     * @return nftCollateralContract nftCollateralId\\n     * The address of the collateral token contract and the ID of the collateral.\\n     */\\n    function getCollateral(\\n        address _loanContract,\\n        uint256 _loanIdentifier\\n    ) external view override returns (address, uint256) {\\n        // get loan data\\n        IArcadeLoanCore.LoanData memory data = IArcadeLoanCore(_loanContract).getLoan(_loanIdentifier);\\n        return (data.terms.collateralAddress, data.terms.collateralId);\\n    }\\n\\n    /**\\n     * @dev Retrieves the loan coordinator from a specific Arcade loan contract.\\n     * @param _loanContract The address of the contract containing the Arcade loan.\\n     * @return  The loan coordinator contract.\\n     */\\n\\n    /**\\n     * @dev Gets the collateral information for a specific Arcade loan.\\n     * @param _loanContract The address of the contract containing the Arcade loan.\\n     * @param _loanIdentifier The unique identifier for the Arcade loan.\\n     * @return loanERC20Denomination maximumRepaymentAmount\\n     *  The address of the payoff token and the required payoff amount.\\n     */\\n    function getPayoffDetails(\\n        address _loanContract,\\n        uint256 _loanIdentifier\\n    ) external view override returns (address, uint256) {\\n        // get loan data\\n        IArcadeLoanCore.LoanData memory data = IArcadeLoanCore(_loanContract).getLoan(_loanIdentifier);\\n        // get interest amount due\\n        uint256 interestAmount = getInterestAmount(data.terms.principal, data.terms.proratedInterestRate);\\n        uint256 payOffAmount = interestAmount + data.terms.principal;\\n        return (data.terms.payableCurrency, payOffAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xe06dcd3a15b11c19702cf3041600bbf14a9cd177566839763f2cdcc39fa9af79\",\"license\":\"BUSL-1.1\"},\"contracts/refinancing/refinancingAdapters/IRefinancingAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title IRefinancingAdapter\\n * @author NFTfi\\n *\\n * @dev This is the interface for Refinancing Adapters. It provides several methods for managing and retrieving\\n * information about contracts that are eligible for refinancing.\\n *\\n * Adapters should implement this interface\\n */\\ninterface IRefinancingAdapter {\\n    /**\\n     * @dev Returns the borrower's address for a specific refinancable\\n     *\\n     * @param _refinanceableContract Address of the contract containing the refinanceable\\n     * @param _refinancableIdentifier Unique identifier for the refinanceable.\\n     *\\n     * @return Address of the borrower.\\n     */\\n    function getBorrowerAddress(\\n        address _refinanceableContract,\\n        uint256 _refinancableIdentifier\\n    ) external returns (address);\\n\\n    /**\\n     * @dev Transfers the role of borrower to refinancing contract for a specific refinanceable.\\n     *\\n     * @param _refinanceableContract Address of the contract containing the refinanceable\\n     * @param _refinancableIdentifier Unique identifier for the loan.\\n     *\\n     * @return True if the operation was successful.\\n     */\\n    function transferBorrowerRole(\\n        address _refinanceableContract,\\n        uint256 _refinancableIdentifier\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Pays off a refinanceable with a specified amount of a specified token.\\n     *\\n     * @param _refinanceableContract Address of the contract containing the refinanceable\\n     * @param _refinancableIdentifier Unique identifier for the refinanceable.\\n     * @param _payBackToken Token used to pay back the refinanceable.\\n     * @param _payBackAmount Amount of tokens used to pay back the refinanceable.\\n     *\\n     * @return True if the operation was successful.\\n     */\\n    function payOffRefinancable(\\n        address _refinanceableContract,\\n        uint256 _refinancableIdentifier,\\n        address _payBackToken,\\n        uint256 _payBackAmount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Returns the collateral information for a specific refinancable.\\n     *\\n     * @param _refinanceableContract Address of the contract containing the refinanceable\\n     * @param _refinancableIdentifier Unique identifier for the refinanceable.\\n     *\\n     * @return The address of the collateral token and the amount of collateral.\\n     */\\n    function getCollateral(\\n        address _refinanceableContract,\\n        uint256 _refinancableIdentifier\\n    ) external view returns (address, uint256);\\n\\n    /**\\n     * @dev Returns the payoff details for a specific refinancable.\\n     *\\n     * @param _refinanceableContract Address of the contract containing the refinanceable\\n     * @param _refinancableIdentifier Unique identifier for the loan.\\n     *\\n     * @return The address of the payoff token and the required payoff amount.\\n     */\\n    function getPayoffDetails(\\n        address _refinanceableContract,\\n        uint256 _refinancableIdentifier\\n    ) external view returns (address, uint256);\\n}\\n\",\"keccak256\":\"0x85754672feb5a38cecd97a96dc73f5deb39bd673fc09977d426311fa32f82866\",\"license\":\"BUSL-1.1\"},\"contracts/refinancing/refinancingAdapters/arcade/IArcadeLoanCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/**\\n * @title IArcadeLoanCore\\n * @author\\n * @dev\\n */\\ninterface IArcadeLoanCore {\\n    /**\\n     * @dev Enum describing the current state of a loan.\\n     * State change flow:\\n     * Created -> Active -> Repaid\\n     *                   -> Defaulted\\n     */\\n    enum LoanState {\\n        // We need a default that is not 'Created' - this is the zero value\\n        DUMMY_DO_NOT_USE,\\n        // The loan has been initialized, funds have been delivered to the borrower and the collateral is held.\\n        Active,\\n        // The loan has been repaid, and the collateral has been returned to the borrower. This is a terminal state.\\n        Repaid,\\n        // The loan was delinquent and collateral claimed by the lender. This is a terminal state.\\n        Defaulted\\n    }\\n\\n    /**\\n     * @dev The raw terms of a loan.\\n     */\\n    struct LoanTerms {\\n        // Interest expressed as a rate, unlike V1 gross value.\\n        // Input conversion: 0.01% = (1 * 10**18) ,  10.00% = (1000 * 10**18)\\n        // This represents the rate over the lifetime of the loan, not APR.\\n        // 0.01% is the minimum interest rate allowed by the protocol.\\n        uint256 proratedInterestRate;\\n        /// @dev Full-slot variables\\n        // The amount of principal in terms of the payableCurrency.\\n        uint256 principal;\\n        // The token ID of the address holding the collateral.\\n        /// @dev Can be an AssetVault, or the NFT contract for unbundled collateral\\n        address collateralAddress;\\n        /// @dev Packed variables\\n        // The number of seconds representing relative due date of the loan.\\n        /// @dev Max is 94,608,000, fits in 96 bits\\n        uint96 durationSecs;\\n        // The token ID of the collateral.\\n        uint256 collateralId;\\n        // The payable currency for the loan principal and interest.\\n        address payableCurrency;\\n        // Timestamp for when signature for terms expires\\n        uint96 deadline;\\n        // Affiliate code used to start the loan.\\n        bytes32 affiliateCode;\\n    }\\n\\n    /**\\n     * @dev Predicate for item-based verifications\\n     */\\n    struct Predicate {\\n        // The encoded predicate, to decoded and parsed by the verifier contract.\\n        bytes data;\\n        // The verifier contract.\\n        address verifier;\\n    }\\n\\n    /**\\n     * @dev Snapshot of lending fees at the time of loan creation.\\n     */\\n    struct FeeSnapshot {\\n        // The fee taken when lender claims defaulted collateral.\\n        uint16 lenderDefaultFee;\\n        // The fee taken from the borrower's interest repayment.\\n        uint16 lenderInterestFee;\\n        // The fee taken from the borrower's principal repayment.\\n        uint16 lenderPrincipalFee;\\n    }\\n\\n    /**\\n     * @dev The data of a loan. This is stored once the loan is Active\\n     */\\n    struct LoanData {\\n        /// @dev Packed variables\\n        // The current state of the loan.\\n        LoanState state;\\n        // Start date of the loan, using block.timestamp.\\n        uint160 startDate;\\n        /// @dev Full-slot variables\\n        // The raw terms of the loan.\\n        LoanTerms terms;\\n        // Record of lending fees at the time of loan creation.\\n        FeeSnapshot feeSnapshot;\\n    }\\n\\n    function borrowerNote() external view returns (address);\\n    function getLoan(uint256 loanId) external view returns (LoanData memory loanData);\\n}\\n\",\"keccak256\":\"0x1114b60c97d7255e4377510dbdd0314f1d35167d4d1d9be4cc378e0aaa68f7a2\",\"license\":\"MIT\"},\"contracts/refinancing/refinancingAdapters/arcade/IRepaymentController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/**\\n * @title IRepaymentController\\n * @author\\n * @dev\\n */\\ninterface IRepaymentController {\\n    function repay(uint256 loanId) external;\\n}\\n\",\"keccak256\":\"0x87b56f3c5ef9e8d818a30cfcd825c4d6c0032b8a23e48538af46c5edb6ea0a7f\",\"license\":\"MIT\"},\"contracts/refinancing/refinancingAdapters/arcade/InterestCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title InterestCalculator\\n * @author Non-Fungible Technologies, Inc.\\n *\\n * Interface for calculating the interest amount\\n * given an interest rate and principal amount. Assumes\\n * that the interestRate is already expressed over the desired\\n * time period.\\n */\\nabstract contract InterestCalculator {\\n    // ============================================ STATE ==============================================\\n\\n    /// @dev The units of precision equal to the minimum interest of 1 basis point.\\n    uint256 public constant INTEREST_RATE_DENOMINATOR = 1e18;\\n\\n    uint256 public constant BASIS_POINTS_DENOMINATOR = 1e4;\\n\\n    // ======================================== CALCULATIONS ===========================================\\n\\n    /**\\n     * @notice Calculate the interest due over a full term.\\n     *\\n     * @dev Interest and principal must be entered with 18 units of\\n     *      precision from the basis point unit (e.g. 1e18 == 0.01%)\\n     *\\n     * @param principal                             Principal amount in the loan terms.\\n     * @param proratedInterestRate                  Interest rate in the loan terms, prorated over loan duration.\\n     *\\n     * @return interest                             The amount of interest due.\\n     */\\n    function getInterestAmount(uint256 principal, uint256 proratedInterestRate) public pure returns (uint256) {\\n        return (principal * proratedInterestRate) / (INTEREST_RATE_DENOMINATOR * BASIS_POINTS_DENOMINATOR);\\n    }\\n}\\n\",\"keccak256\":\"0x912b753d0059402164a505b31c6335c38860244884be6b583e1c8f09bdefc9ec\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610a9b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80638d7f278411610076578063cc3266e81161005b578063cc3266e814610174578063cfa498a314610183578063e29b9d0a1461018c57600080fd5b80638d7f27841461013e578063a4d160e31461016157600080fd5b806310b29fee146100a857806358024fce146100df5780637da9f018146100f257806384d2b81c1461011d575b600080fd5b6100bb6100b6366004610741565b6101a7565b604080516001600160a01b0390931683526020830191909152015b60405180910390f35b6100bb6100ed366004610741565b61026a565b610105610100366004610741565b6102fb565b6040516001600160a01b0390911681526020016100d6565b61013061012b36600461076d565b6103d6565b6040519081526020016100d6565b61015161014c36600461078f565b610400565b60405190151581526020016100d6565b61015161016f366004610741565b61051a565b610130670de0b6b3a764000081565b61013061271081565b6101057374241e1a9c021643289476426b9b70229ab40d5381565b6000806000846001600160a01b031663504006ca856040518263ffffffff1660e01b81526004016101da91815260200190565b6101a060405180830381865afa1580156101f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021c91906108fb565b9050600061023a8260400151602001518360400151600001516103d6565b905060008260400151602001518261025291906109fc565b60409093015160a00151945091925050509250929050565b6000806000846001600160a01b031663504006ca856040518263ffffffff1660e01b815260040161029d91815260200190565b6101a060405180830381865afa1580156102bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102df91906108fb565b6040908101519081015160809091015190969095509350505050565b6000826001600160a01b031663bf848f816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561033b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035f9190610a0f565b6001600160a01b0316636352211e836040518263ffffffff1660e01b815260040161038c91815260200190565b602060405180830381865afa1580156103a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cd9190610a0f565b90505b92915050565b60006103ec612710670de0b6b3a7640000610a33565b6103f68385610a33565b6103cd9190610a4a565b6040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152602482018390526000919084169063095ea7b3906044016020604051808303816000875af115801561046c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104909190610a6c565b506040517f371fd8e6000000000000000000000000000000000000000000000000000000008152600481018590527374241e1a9c021643289476426b9b70229ab40d539063371fd8e690602401600060405180830381600087803b1580156104f757600080fd5b505af115801561050b573d6000803e3d6000fd5b50600198975050505050505050565b600080836001600160a01b031663bf848f816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561055b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057f9190610a0f565b6040516331a9108f60e11b8152600481018590529091506000906001600160a01b03831690636352211e90602401602060405180830381865afa1580156105ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ee9190610a0f565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03808316600483015230602483015260448201879052919250908316906323b872dd90606401600060405180830381600087803b15801561065b57600080fd5b505af115801561066f573d6000803e3d6000fd5b50506040516331a9108f60e11b8152600481018790523092506001600160a01b0385169150636352211e90602401602060405180830381865afa1580156106ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106de9190610a0f565b6001600160a01b03161461071e576040517f7e676e6e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506001949350505050565b6001600160a01b038116811461073e57600080fd5b50565b6000806040838503121561075457600080fd5b823561075f81610729565b946020939093013593505050565b6000806040838503121561078057600080fd5b50508035926020909101359150565b600080600080608085870312156107a557600080fd5b84356107b081610729565b93506020850135925060408501356107c781610729565b9396929550929360600135925050565b6040516080810167ffffffffffffffff8111828210171561080857634e487b7160e01b600052604160045260246000fd5b60405290565b604051610100810167ffffffffffffffff8111828210171561080857634e487b7160e01b600052604160045260246000fd5b805161084b81610729565b919050565b80516bffffffffffffffffffffffff8116811461084b57600080fd5b805161ffff8116811461084b57600080fd5b60006060828403121561089057600080fd5b6040516060810181811067ffffffffffffffff821117156108c157634e487b7160e01b600052604160045260246000fd5b6040529050806108d08361086c565b81526108de6020840161086c565b60208201526108ef6040840161086c565b60408201525092915050565b60008183036101a081121561090f57600080fd5b6109176107d7565b83516004811061092657600080fd5b8152602084015161093681610729565b6020820152610100603f19830181131561094f57600080fd5b61095761080e565b92506040850151835260608501516020840152608085015161097881610729565b604084015261098960a08601610850565b606084015260c085015160808401526109a460e08601610840565b60a08401526109b4818601610850565b60c08401525061012084015160e08301528160408201526109d985610140860161087e565b6060820152949350505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156103d0576103d06109e6565b600060208284031215610a2157600080fd5b8151610a2c81610729565b9392505050565b80820281158282048414176103d0576103d06109e6565b600082610a6757634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610a7e57600080fd5b81518015158114610a2c57600080fdfea164736f6c6343000813000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c80638d7f278411610076578063cc3266e81161005b578063cc3266e814610174578063cfa498a314610183578063e29b9d0a1461018c57600080fd5b80638d7f27841461013e578063a4d160e31461016157600080fd5b806310b29fee146100a857806358024fce146100df5780637da9f018146100f257806384d2b81c1461011d575b600080fd5b6100bb6100b6366004610741565b6101a7565b604080516001600160a01b0390931683526020830191909152015b60405180910390f35b6100bb6100ed366004610741565b61026a565b610105610100366004610741565b6102fb565b6040516001600160a01b0390911681526020016100d6565b61013061012b36600461076d565b6103d6565b6040519081526020016100d6565b61015161014c36600461078f565b610400565b60405190151581526020016100d6565b61015161016f366004610741565b61051a565b610130670de0b6b3a764000081565b61013061271081565b6101057374241e1a9c021643289476426b9b70229ab40d5381565b6000806000846001600160a01b031663504006ca856040518263ffffffff1660e01b81526004016101da91815260200190565b6101a060405180830381865afa1580156101f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021c91906108fb565b9050600061023a8260400151602001518360400151600001516103d6565b905060008260400151602001518261025291906109fc565b60409093015160a00151945091925050509250929050565b6000806000846001600160a01b031663504006ca856040518263ffffffff1660e01b815260040161029d91815260200190565b6101a060405180830381865afa1580156102bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102df91906108fb565b6040908101519081015160809091015190969095509350505050565b6000826001600160a01b031663bf848f816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561033b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035f9190610a0f565b6001600160a01b0316636352211e836040518263ffffffff1660e01b815260040161038c91815260200190565b602060405180830381865afa1580156103a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cd9190610a0f565b90505b92915050565b60006103ec612710670de0b6b3a7640000610a33565b6103f68385610a33565b6103cd9190610a4a565b6040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152602482018390526000919084169063095ea7b3906044016020604051808303816000875af115801561046c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104909190610a6c565b506040517f371fd8e6000000000000000000000000000000000000000000000000000000008152600481018590527374241e1a9c021643289476426b9b70229ab40d539063371fd8e690602401600060405180830381600087803b1580156104f757600080fd5b505af115801561050b573d6000803e3d6000fd5b50600198975050505050505050565b600080836001600160a01b031663bf848f816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561055b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057f9190610a0f565b6040516331a9108f60e11b8152600481018590529091506000906001600160a01b03831690636352211e90602401602060405180830381865afa1580156105ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ee9190610a0f565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03808316600483015230602483015260448201879052919250908316906323b872dd90606401600060405180830381600087803b15801561065b57600080fd5b505af115801561066f573d6000803e3d6000fd5b50506040516331a9108f60e11b8152600481018790523092506001600160a01b0385169150636352211e90602401602060405180830381865afa1580156106ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106de9190610a0f565b6001600160a01b03161461071e576040517f7e676e6e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b506001949350505050565b6001600160a01b038116811461073e57600080fd5b50565b6000806040838503121561075457600080fd5b823561075f81610729565b946020939093013593505050565b6000806040838503121561078057600080fd5b50508035926020909101359150565b600080600080608085870312156107a557600080fd5b84356107b081610729565b93506020850135925060408501356107c781610729565b9396929550929360600135925050565b6040516080810167ffffffffffffffff8111828210171561080857634e487b7160e01b600052604160045260246000fd5b60405290565b604051610100810167ffffffffffffffff8111828210171561080857634e487b7160e01b600052604160045260246000fd5b805161084b81610729565b919050565b80516bffffffffffffffffffffffff8116811461084b57600080fd5b805161ffff8116811461084b57600080fd5b60006060828403121561089057600080fd5b6040516060810181811067ffffffffffffffff821117156108c157634e487b7160e01b600052604160045260246000fd5b6040529050806108d08361086c565b81526108de6020840161086c565b60208201526108ef6040840161086c565b60408201525092915050565b60008183036101a081121561090f57600080fd5b6109176107d7565b83516004811061092657600080fd5b8152602084015161093681610729565b6020820152610100603f19830181131561094f57600080fd5b61095761080e565b92506040850151835260608501516020840152608085015161097881610729565b604084015261098960a08601610850565b606084015260c085015160808401526109a460e08601610840565b60a08401526109b4818601610850565b60c08401525061012084015160e08301528160408201526109d985610140860161087e565b6060820152949350505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156103d0576103d06109e6565b600060208284031215610a2157600080fd5b8151610a2c81610729565b9392505050565b80820281158282048414176103d0576103d06109e6565b600082610a6757634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610a7e57600080fd5b81518015158114610a2c57600080fdfea164736f6c6343000813000a",
  "devdoc": {
    "author": "NFTfi",
    "details": "This contract is an implementation of the IRefinancingAdapter for the Arcade platform. It handles operations related to refinancing Arcade loans such as transferring the borrower role, paying off loans, and retrieving loan and collateral details.",
    "kind": "dev",
    "methods": {
      "getBorrowerAddress(address,uint256)": {
        "details": "Gets the address of the borrower for a specific Arcade loan.",
        "params": {
          "_loanContract": "The address of the contract containing the Arcade loan.",
          "_loanIdentifier": "The unique identifier for the Arcade loan."
        },
        "returns": {
          "_0": "The address of the borrower."
        }
      },
      "getCollateral(address,uint256)": {
        "details": "Gets the collateral information for a specific Arcade loan.",
        "params": {
          "_loanContract": "The address of the contract containing the Arcade loan.",
          "_loanIdentifier": "The unique identifier for the Arcade loan."
        },
        "returns": {
          "_0": "nftCollateralContract nftCollateralId The address of the collateral token contract and the ID of the collateral."
        }
      },
      "getInterestAmount(uint256,uint256)": {
        "details": "Interest and principal must be entered with 18 units of      precision from the basis point unit (e.g. 1e18 == 0.01%)",
        "params": {
          "principal": "Principal amount in the loan terms.",
          "proratedInterestRate": "Interest rate in the loan terms, prorated over loan duration."
        },
        "returns": {
          "_0": "interest                             The amount of interest due."
        }
      },
      "getPayoffDetails(address,uint256)": {
        "details": "Gets the collateral information for a specific Arcade loan.",
        "params": {
          "_loanContract": "The address of the contract containing the Arcade loan.",
          "_loanIdentifier": "The unique identifier for the Arcade loan."
        },
        "returns": {
          "_0": "loanERC20Denomination maximumRepaymentAmount  The address of the payoff token and the required payoff amount."
        }
      },
      "payOffRefinancable(address,uint256,address,uint256)": {
        "details": "Pays off an Arcade loan with a specified amount of a specified token.",
        "params": {
          "_loanContract": "The address of the contract containing the Arcade loan.",
          "_loanIdentifier": "The unique identifier for the Arcade loan.",
          "_payBackAmount": "The amount of tokens used to pay back the Arcade loan.",
          "_payBackToken": "The token used to pay back the Arcade loan."
        },
        "returns": {
          "_0": "A boolean value indicating whether the operation was successful."
        }
      },
      "transferBorrowerRole(address,uint256)": {
        "details": "Transfers the borrower role to this contract for a specific Arcade loan.",
        "params": {
          "_loanContract": "The address of the contract containing the Arcade loan.",
          "_loanIdentifier": "The unique identifier for the Arcade loan."
        },
        "returns": {
          "_0": "A boolean value indicating whether the operation was successful."
        }
      }
    },
    "title": "ArcadeRefinancingAdapter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getInterestAmount(uint256,uint256)": {
        "notice": "Calculate the interest due over a full term."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}