{
  "address": "0xdA1FfB0Bf2cE637FF12CA31C841Ced04b6483CfD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_hub",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CollateralDelegated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CollateralNotLockedByLoan",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoSuchERC1155sOwned",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoSuchERC20Owned",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoSuchERC721Owned",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoSuchTokenOwned",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAPlugin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyLoanContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenIsCollateral",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftCollateralContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftCollateralId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldLoanContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newloanContract",
          "type": "address"
        }
      ],
      "name": "LoanHandedOver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftCollateralContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftCollateralId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "loanContract",
          "type": "address"
        }
      ],
      "name": "Locked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftCollateralContract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftCollateralId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "loanContract",
          "type": "address"
        }
      ],
      "name": "Unlocked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_plugin",
          "type": "address"
        }
      ],
      "name": "addPlugin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "drainERC20Airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_nftType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "drainNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newLoanContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nftCollateralContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftCollateralId",
          "type": "uint256"
        }
      ],
      "name": "handOverLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hub",
      "outputs": [
        {
          "internalType": "contract INftfiHub",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftCollateralContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftCollateralId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_loan",
          "type": "address"
        }
      ],
      "name": "isInEscrowWithLoan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftCollateralWrapper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nftCollateralContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftCollateralId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "lockCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "pluginCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rejectTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_plugin",
          "type": "address"
        }
      ],
      "name": "removePlugin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwnerCandidate",
          "type": "address"
        }
      ],
      "name": "requestTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftCollateralWrapper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nftCollateralContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftCollateralId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "unlockCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "withdrawNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x886ba4b72aa3012f5b378e714ebca6b2f6667287d7c9974dbf5aac70c3c8a1c6",
  "receipt": {
    "to": null,
    "from": "0x02e037F56728E947e92Af2c05baF7FeF387Ddd06",
    "contractAddress": "0xdA1FfB0Bf2cE637FF12CA31C841Ced04b6483CfD",
    "transactionIndex": 8,
    "gasUsed": "1728189",
    "logsBloom": "0x
    "blockHash": "0x130cffdc49aae35cfa3465b95505119a14347497eeb6cd3395f7fe3385f72879",
    "transactionHash": "0x886ba4b72aa3012f5b378e714ebca6b2f6667287d7c9974dbf5aac70c3c8a1c6",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 6769022,
        "transactionHash": "0x886ba4b72aa3012f5b378e714ebca6b2f6667287d7c9974dbf5aac70c3c8a1c6",
        "address": "0xdA1FfB0Bf2cE637FF12CA31C841Ced04b6483CfD",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000beebcd47b8315b9ffc949318269a329aeb7d97b4"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x130cffdc49aae35cfa3465b95505119a14347497eeb6cd3395f7fe3385f72879"
      }
    ],
    "blockNumber": 6769022,
    "cumulativeGasUsed": "2285928",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbeEBCD47B8315B9fFC949318269A329AEb7D97b4",
    "0xFb14c557aF7E732C720b8f46bCeE323d167314A4"
  ],
  "numDeployments": 1,
  "solcInputHash": "bab281e5640fb4f8a58586b3f548739e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hub\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CollateralDelegated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollateralNotLockedByLoan\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSuchERC1155sOwned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSuchERC20Owned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSuchERC721Owned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSuchTokenOwned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAPlugin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLoanContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenIsCollateral\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftCollateralContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftCollateralId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLoanContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newloanContract\",\"type\":\"address\"}],\"name\":\"LoanHandedOver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftCollateralContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftCollateralId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanContract\",\"type\":\"address\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftCollateralContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftCollateralId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanContract\",\"type\":\"address\"}],\"name\":\"Unlocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_plugin\",\"type\":\"address\"}],\"name\":\"addPlugin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"drainERC20Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nftType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"drainNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLoanContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftCollateralContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftCollateralId\",\"type\":\"uint256\"}],\"name\":\"handOverLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hub\",\"outputs\":[{\"internalType\":\"contract INftfiHub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftCollateralContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftCollateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_loan\",\"type\":\"address\"}],\"name\":\"isInEscrowWithLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftCollateralWrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftCollateralContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftCollateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"lockCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"pluginCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rejectTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_plugin\",\"type\":\"address\"}],\"name\":\"removePlugin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwnerCandidate\",\"type\":\"address\"}],\"name\":\"requestTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftCollateralWrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftCollateralContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftCollateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"unlockCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdrawNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"NFTfi\",\"kind\":\"dev\",\"methods\":{\"addPlugin(address)\":{\"params\":{\"_plugin\":\"address of the plugin\"}},\"constructor\":{\"params\":{\"_admin\":\"- Initial admin of this contract.\"}},\"drainERC20Airdrop(address,uint256,address)\":{\"params\":{\"_receiver\":\"- receiver of the token\",\"_tokenAddress\":\"- address of the token contract for the token to be sent out\"}},\"drainNFT(string,address,uint256,address)\":{\"params\":{\"_nftType\":\"- nft type key which is sourced from nftfi hub\",\"_receiver\":\"- receiver of the token\",\"_tokenAddress\":\"- address of the token contract for the token to be sent out\",\"_tokenId\":\"- id token to be sent out\"}},\"isInEscrowWithLoan(address,uint256,address)\":{\"params\":{\"_loan\":\"- Address of the loan contract.\",\"_nftCollateralContract\":\"- Address of the NFT collateral contract.\",\"_nftCollateralId\":\"- ID of the NFT collateral.\"},\"returns\":{\"_0\":\"bool - True if the NFT is in escrow with the loan, false otherwise.\"}},\"lockCollateral(address,address,uint256,address)\":{\"params\":{\"_borrower\":\"- Address of the borrower.\",\"_nftCollateralContract\":\"- Address of the NFT collateral contract.\",\"_nftCollateralId\":\"- ID of the NFT collateral.\",\"_nftCollateralWrapper\":\"- Address of the NFT wrapper contract.\"}},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated.\",\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if allowed\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated.\",\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if allowed\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removePlugin(address)\":{\"params\":{\"_plugin\":\"address of the plugin\"}},\"requestTransferOwnership(address)\":{\"details\":\"Requests transferring ownership of the contract to a new account (`_newOwnerCandidate`). Can only be called by the current owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"Checks whether this contract implements the interface defined by `interfaceId`.\",\"params\":{\"_interfaceId\":\"Id of the interface\"},\"returns\":{\"_0\":\"true if this contract implements the interface\"}},\"unlockCollateral(address,address,uint256,address)\":{\"params\":{\"_nftCollateralContract\":\"- Address of the NFT collateral contract.\",\"_nftCollateralId\":\"- ID of the NFT collateral.\",\"_nftCollateralWrapper\":\"- Address of the NFT wrapper contract.\",\"_recipient\":\"- Address of the recipient.\"}},\"withdrawNFT(address,uint256,address)\":{\"params\":{\"_receiver\":\"- receiver of the token\",\"_tokenAddress\":\"- address of the token contract for the token to be sent out\",\"_tokenId\":\"- id token to be sent out\"}}},\"stateVariables\":{\"_escrowTokens\":{\"details\":\"keeps track of tokens being held as loan collateral, so we dont allow these to be transferred with the aridrop draining functions nft contract address => nft id => amount (in case of 1155)\"}},\"title\":\"Escrow\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addPlugin(address)\":{\"notice\":\"Admin function for adding a plugin that can make an arbitrary function call WARNING! serious security implications! plugins can move the collateral\"},\"constructor\":{\"notice\":\"Sets the admin of the contract.\"},\"drainERC20Airdrop(address,uint256,address)\":{\"notice\":\"used by the owner account to be able to drain sturck ERC20 tokens for revenue share for the locked  collateral NFT-s\"},\"drainNFT(string,address,uint256,address)\":{\"notice\":\"used by the owner account to be able to drain stuck or airdropped NFTs a check prevents draining collateral\"},\"isInEscrowWithLoan(address,uint256,address)\":{\"notice\":\"Checks if a collateral NFT is in escrow with a specific loan.\"},\"lockCollateral(address,address,uint256,address)\":{\"notice\":\"Locks collateral NFT for a loan.\"},\"removePlugin(address)\":{\"notice\":\"Admin function for removing a plugin that can make an arbitrary function call\"},\"unlockCollateral(address,address,uint256,address)\":{\"notice\":\"Unlocks collateral NFT for a loan.\"},\"withdrawNFT(address,uint256,address)\":{\"notice\":\"used by the owner account to be able to drain any tokens used as collateral that is not locked in a loan\"}},\"notice\":\"Protocol wide escrow contract for NFT collateral used when a user doen't have a personal escrow deployed*\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/escrow/Escrow.sol\":\"Escrow\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":900},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x67ef46fef257faae47adb630aad49694dda0334e5f7a7c5fb386243b974886b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/escrow/Escrow.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {Ownable} from \\\"../utils/Ownable.sol\\\";\\nimport {INftWrapper} from \\\"../interfaces/INftWrapper.sol\\\";\\nimport {IEscrow} from \\\"../interfaces/IEscrow.sol\\\";\\nimport {NftReceiver} from \\\"../utils/NftReceiver.sol\\\";\\nimport {INftfiHub} from \\\"../interfaces/INftfiHub.sol\\\";\\nimport {ContractKeys} from \\\"../utils/ContractKeys.sol\\\";\\nimport {LoanCoordinator} from \\\"../loans/LoanCoordinator.sol\\\";\\nimport {IPermittedNFTs} from \\\"../interfaces/IPermittedNFTs.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title  Escrow\\n * @author NFTfi\\n * @notice Protocol wide escrow contract for NFT collateral\\n * used when a user doen't have a personal escrow deployed\\n **/\\ncontract Escrow is IEscrow, Ownable, NftReceiver {\\n    using SafeERC20 for IERC20;\\n\\n    // collateral contract => collateral id => locker contract(loan) => amount (preparing for 1155)\\n    mapping(address => mapping(uint256 => mapping(address => uint256))) internal _tokensLockedByLoan;\\n\\n    /**\\n     * @dev keeps track of tokens being held as loan collateral, so we dont allow these\\n     * to be transferred with the aridrop draining functions\\n     * nft contract address => nft id => amount (in case of 1155)\\n     */\\n    mapping(address => mapping(uint256 => uint256)) internal _escrowTokens;\\n\\n    // addresses of contracts thathas plugin rights\\n    mapping(address => bool) private plugins;\\n\\n    // solhint-disable-next-line immutable-vars-naming\\n    INftfiHub public immutable hub;\\n\\n    event Locked(\\n        address indexed nftCollateralContract,\\n        uint256 indexed nftCollateralId,\\n        address indexed borrower,\\n        address loanContract\\n    );\\n\\n    event Unlocked(\\n        address indexed nftCollateralContract,\\n        uint256 indexed nftCollateralId,\\n        address indexed recipient,\\n        address loanContract\\n    );\\n\\n    event LoanHandedOver(\\n        address indexed nftCollateralContract,\\n        uint256 indexed nftCollateralId,\\n        address oldLoanContract,\\n        address newloanContract\\n    );\\n\\n    error OnlyLoanContract();\\n    error CollateralNotLockedByLoan();\\n    error NoSuchTokenOwned();\\n    error NoSuchERC1155sOwned();\\n    error NoSuchERC721Owned();\\n    error NoSuchERC20Owned();\\n    error TokenIsCollateral();\\n    error CollateralDelegated();\\n    error NotAPlugin();\\n\\n    /**\\n     * @notice Sets the admin of the contract.\\n     *\\n     * @param _admin - Initial admin of this contract.\\n     */\\n    constructor(address _admin, address _hub) Ownable(_admin) {\\n        hub = INftfiHub(_hub);\\n    }\\n\\n    /**\\n     * @notice Checks if the caller is is a loan contract\\n     */\\n    modifier onlyLoan() {\\n        // checking that locker is a registered loan type\\n        // WARNING if we ever register an external account (or malicious contract) as a loan type that\\n        // account can steal user nfts that has been approved for this contract by locking and unlocking\\n        if (\\n            LoanCoordinator(hub.getContract(ContractKeys.LOAN_COORDINATOR)).getTypeOfLoanContract(msg.sender) ==\\n            bytes32(0)\\n        ) revert OnlyLoanContract();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks if the caller is the locker of the given collateral nft in the parameter\\n     *\\n     * @param _nftCollateralContract - Address of the NFT collateral contract.\\n     * @param _nftCollateralId - ID of the NFT collateral.\\n     */\\n    modifier onlyLockingLoan(address _nftCollateralContract, uint256 _nftCollateralId) {\\n        if (_tokensLockedByLoan[_nftCollateralContract][_nftCollateralId][msg.sender] == 0)\\n            revert CollateralNotLockedByLoan();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Locks collateral NFT for a loan.\\n     *\\n     * @param _nftCollateralWrapper - Address of the NFT wrapper contract.\\n     * @param _nftCollateralContract - Address of the NFT collateral contract.\\n     * @param _nftCollateralId - ID of the NFT collateral.\\n     * @param _borrower - Address of the borrower.\\n     */\\n    function lockCollateral(\\n        address _nftCollateralWrapper,\\n        address _nftCollateralContract,\\n        uint256 _nftCollateralId,\\n        address _borrower\\n    ) external virtual override onlyLoan {\\n        _lockCollateral(_nftCollateralContract, _nftCollateralId);\\n        _transferNFT(_nftCollateralWrapper, _nftCollateralContract, _nftCollateralId, _borrower, address(this));\\n        emit Locked(_nftCollateralContract, _nftCollateralId, _borrower, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Internal function to lock collateral.\\n     *\\n     * @param _nftCollateralContract - Address of the NFT collateral contract.\\n     * @param _nftCollateralId - ID of the NFT collateral.\\n     */\\n    function _lockCollateral(address _nftCollateralContract, uint256 _nftCollateralId) internal {\\n        _tokensLockedByLoan[_nftCollateralContract][_nftCollateralId][msg.sender] += 1;\\n        _escrowTokens[_nftCollateralContract][_nftCollateralId] += 1;\\n    }\\n\\n    /**\\n     * @notice Unlocks collateral NFT for a loan.\\n     *\\n     * @param _nftCollateralWrapper - Address of the NFT wrapper contract.\\n     * @param _nftCollateralContract - Address of the NFT collateral contract.\\n     * @param _nftCollateralId - ID of the NFT collateral.\\n     * @param _recipient - Address of the recipient.\\n     */\\n    function unlockCollateral(\\n        address _nftCollateralWrapper,\\n        address _nftCollateralContract,\\n        uint256 _nftCollateralId,\\n        address _recipient\\n    ) external virtual override onlyLockingLoan(_nftCollateralContract, _nftCollateralId) {\\n        _unlockCollateral(_nftCollateralContract, _nftCollateralId);\\n        _transferNFT(_nftCollateralWrapper, _nftCollateralContract, _nftCollateralId, address(this), _recipient);\\n        emit Unlocked(_nftCollateralContract, _nftCollateralId, _recipient, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Internal function to unlock collateral.\\n     *\\n     * @param _nftCollateralContract - Address of the NFT collateral contract.\\n     * @param _nftCollateralId - ID of the NFT collateral.\\n     */\\n    function _unlockCollateral(address _nftCollateralContract, uint256 _nftCollateralId) internal {\\n        _tokensLockedByLoan[_nftCollateralContract][_nftCollateralId][msg.sender] -= 1;\\n        _escrowTokens[_nftCollateralContract][_nftCollateralId] -= 1;\\n    }\\n\\n    function handOverLoan(\\n        address _newLoanContract,\\n        address _nftCollateralContract,\\n        uint256 _nftCollateralId\\n    ) external virtual override onlyLockingLoan(_nftCollateralContract, _nftCollateralId) {\\n        _tokensLockedByLoan[_nftCollateralContract][_nftCollateralId][msg.sender] -= 1;\\n        _tokensLockedByLoan[_nftCollateralContract][_nftCollateralId][_newLoanContract] += 1;\\n        emit LoanHandedOver(_nftCollateralContract, _nftCollateralId, msg.sender, _newLoanContract);\\n    }\\n\\n    /**\\n     * @notice Checks if a collateral NFT is in escrow with a specific loan.\\n     *\\n      @param _nftCollateralContract - Address of the NFT collateral contract.\\n     * @param _nftCollateralId - ID of the NFT collateral.\\n     * @param _loan - Address of the loan contract.\\n     * @return bool - True if the NFT is in escrow with the loan, false otherwise.\\n     */\\n    function isInEscrowWithLoan(\\n        address _nftCollateralContract,\\n        uint256 _nftCollateralId,\\n        address _loan\\n    ) external view override returns (bool) {\\n        return _tokensLockedByLoan[_nftCollateralContract][_nftCollateralId][_loan] > 0;\\n    }\\n\\n    /**\\n     * @dev Transfers several types of NFTs using a wrapper that knows how to handle each case.\\n     *\\n     * @param _sender - Current owner of the NF\\n     * @param _recipient - Recipient of the transfer\\n     */\\n    function _transferNFT(\\n        address _nftCollateralWrapper,\\n        address _nftCollateralContract,\\n        uint256 _nftCollateralId,\\n        address _sender,\\n        address _recipient\\n    ) internal {\\n        Address.functionDelegateCall(\\n            _nftCollateralWrapper,\\n            abi.encodeWithSelector(\\n                INftWrapper(_nftCollateralWrapper).transferNFT.selector,\\n                _sender,\\n                _recipient,\\n                _nftCollateralContract,\\n                _nftCollateralId\\n            ),\\n            \\\"NFT not successfully transferred\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Checks if the contract owns a specific NFT.\\n     *\\n     * @param _nftCollateralWrapper - Address of the NFT wrapper contract.\\n     * @param _nftCollateralContract - Address of the NFT collateral contract.\\n     * @param _nftCollateralId - ID of the NFT collateral.\\n     * @return bool - True if the contract owns the NFT, false otherwise.\\n     */\\n    function _isOwned(\\n        address _nftCollateralWrapper,\\n        address _nftCollateralContract,\\n        uint256 _nftCollateralId\\n    ) internal returns (bool) {\\n        bytes memory result = Address.functionDelegateCall(\\n            _nftCollateralWrapper,\\n            abi.encodeWithSelector(\\n                INftWrapper(_nftCollateralWrapper).isOwner.selector,\\n                address(this),\\n                _nftCollateralContract,\\n                _nftCollateralId\\n            ),\\n            \\\"Ownership check failed\\\"\\n        );\\n        return abi.decode(result, (bool));\\n    }\\n\\n    /**\\n     * @notice used by the owner account to be able to drain sturck ERC20 tokens for revenue share\\n     * for the locked  collateral NFT-s\\n     * @param _tokenAddress - address of the token contract for the token to be sent out\\n     * @param _receiver - receiver of the token\\n     */\\n    function drainERC20Airdrop(address _tokenAddress, uint256 amount, address _receiver) external onlyOwner {\\n        // ensuring that this cannot be used to transfer any permitted, escrowed nft\\n        // that has the following transfer function (interpreting amount as id):\\n        // function transfer(address _to, uint256 _tokenId), like CryptoKitties for example\\n        if (_escrowTokens[_tokenAddress][amount] > 0) {\\n            revert TokenIsCollateral();\\n        }\\n\\n        IERC20 tokenContract = IERC20(_tokenAddress);\\n        uint256 balance = tokenContract.balanceOf(address(this));\\n        if (balance == 0) {\\n            revert NoSuchERC20Owned();\\n        }\\n        tokenContract.safeTransfer(_receiver, amount);\\n    }\\n\\n    /**\\n     * @notice used by the owner account to be able to drain any tokens used as collateral that is not locked in a loan\\n     * @param _tokenAddress - address of the token contract for the token to be sent out\\n     * @param _tokenId - id token to be sent out\\n     * @param _receiver - receiver of the token\\n     */\\n    function withdrawNFT(address _tokenAddress, uint256 _tokenId, address _receiver) external onlyOwner {\\n        if (_escrowTokens[_tokenAddress][_tokenId] > 0) {\\n            revert TokenIsCollateral();\\n        }\\n        address tokenWrapper = IPermittedNFTs(hub.getContract(ContractKeys.PERMITTED_NFTS)).getNFTWrapper(\\n            _tokenAddress\\n        );\\n        if (!_isOwned(tokenWrapper, _tokenAddress, _tokenId)) {\\n            revert NoSuchTokenOwned();\\n        }\\n        _transferNFT(tokenWrapper, _tokenAddress, _tokenId, address(this), _receiver);\\n    }\\n\\n    /**\\n     * @notice used by the owner account to be able to drain stuck or airdropped NFTs\\n     * a check prevents draining collateral\\n     * @param _nftType - nft type key which is sourced from nftfi hub\\n     * @param _tokenAddress - address of the token contract for the token to be sent out\\n     * @param _tokenId - id token to be sent out\\n     * @param _receiver - receiver of the token\\n     */\\n    function drainNFT(\\n        string memory _nftType,\\n        address _tokenAddress,\\n        uint256 _tokenId,\\n        address _receiver\\n    ) external onlyOwner {\\n        if (_escrowTokens[_tokenAddress][_tokenId] > 0) {\\n            revert TokenIsCollateral();\\n        }\\n        bytes32 nftTypeKey = _getIdFromStringKey(_nftType);\\n        address transferWrapper = IPermittedNFTs(hub.getContract(ContractKeys.PERMITTED_NFTS)).getNftTypeWrapper(\\n            nftTypeKey\\n        );\\n        _transferNFT(transferWrapper, _tokenAddress, _tokenId, address(this), _receiver);\\n    }\\n\\n    /**\\n     * @notice Admin function for adding a plugin that can make an arbitrary function call\\n     * WARNING! serious security implications! plugins can move the collateral\\n     * @param _plugin address of the plugin\\n     */\\n    function addPlugin(address _plugin) external virtual onlyOwner {\\n        plugins[_plugin] = true;\\n    }\\n\\n    /**\\n     * @notice Admin function for removing a plugin that can make an arbitrary function call\\n     * @param _plugin address of the plugin\\n     */\\n    function removePlugin(address _plugin) external virtual onlyOwner {\\n        plugins[_plugin] = false;\\n    }\\n\\n    function pluginCall(address _target, bytes memory _data) external returns (bool, bytes memory) {\\n        if (!plugins[msg.sender]) revert NotAPlugin();\\n        // solhint-disable-next-line avoid-low-level-calls\\n        return _target.call(_data);\\n    }\\n\\n    /**\\n     * @notice Returns the bytes32 representation of a string (copied from ContractKeys so we dont need it as a lib)\\n     * @param _key the string key\\n     * @return id bytes32 representation\\n     */\\n    function _getIdFromStringKey(string memory _key) internal pure returns (bytes32 id) {\\n        // solhint-disable-next-line custom-errors\\n        require(bytes(_key).length <= 32, \\\"invalid key\\\");\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := mload(add(_key, 32))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2214b6801af8826eb42293b38b4fbee61070a5b5de835b758273eda249dc1772\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\ninterface IEscrow {\\n    function lockCollateral(\\n        address _nftCollateralWrapper,\\n        address _nftCollateralContract,\\n        uint256 _nftCollateralId,\\n        address _borrower\\n    ) external;\\n\\n    function unlockCollateral(\\n        address _nftCollateralWrapper,\\n        address _nftCollateralContract,\\n        uint256 _nftCollateralId,\\n        address _recipient\\n    ) external;\\n\\n    function handOverLoan(address _newLoanContract, address _nftCollateralContract, uint256 _nftCollateralId) external;\\n\\n    function isInEscrowWithLoan(\\n        address _nftCollateralContract,\\n        uint256 _nftCollateralId,\\n        address _loan\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x3ce809a4aca7e54d8cda2226f63ce231a35550e874f756eb17c52083f35a99ea\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILoanCoordinator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title ILoanCoordinator\\n * @author NFTfi\\n * @dev LoanCoordinator interface.\\n */\\ninterface ILoanCoordinator {\\n    enum StatusType {\\n        NOT_EXISTS,\\n        NEW,\\n        REPAID,\\n        LIQUIDATED\\n    }\\n\\n    /**\\n     * @notice This struct contains data related to a loan\\n     *\\n     * @param smartNftId - The id of both the promissory note and obligation receipt.\\n     * @param status - The status in which the loan currently is.\\n     * @param loanContract - Address of the contract that created the loan.\\n     */\\n    struct Loan {\\n        address loanContract;\\n        uint64 smartNftId;\\n        StatusType status;\\n    }\\n\\n    function registerLoan() external returns (uint32);\\n\\n    function resetSmartNfts(uint32 _loanId) external;\\n\\n    function mintObligationReceipt(uint32 _loanId, address _borrower) external;\\n\\n    function mintPromissoryNote(uint32 _loanId, address _lender) external;\\n\\n    function resolveLoan(uint32 _loanId, bool liquidated) external;\\n\\n    function promissoryNoteToken() external view returns (address);\\n\\n    function obligationReceiptToken() external view returns (address);\\n\\n    function getLoanData(uint32 _loanId) external view returns (Loan memory);\\n\\n    function isValidLoanId(uint32 _loanId, address _loanContract) external view returns (bool);\\n\\n    function getDefaultLoanContractForOfferType(bytes32 _offerType) external view returns (address);\\n\\n    function getTypeOfLoanContract(address _loanContract) external view returns (bytes32);\\n\\n    function checkNonce(address _user, uint256 _nonce) external view;\\n\\n    function checkAndInvalidateNonce(address _user, uint256 _nonce) external;\\n}\\n\",\"keccak256\":\"0xf407ba508babdbe4ef3bdda3278240cf30c7bba1b49e8cf202a80b77c949d6c0\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/INftWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title INftWrapper\\n * @author NFTfi\\n * @dev Interface for NFT Wrappers.\\n */\\ninterface INftWrapper {\\n    function transferNFT(address from, address to, address nftContract, uint256 tokenId) external returns (bool);\\n\\n    function approveNFT(address to, address nftContract, uint256 tokenId) external returns (bool);\\n\\n    function isOwner(address owner, address nftContract, uint256 tokenId) external view returns (bool);\\n\\n    function balanceOf(address owner, address nftContract, uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5893806ffc6b8dbc12e94e1ee4ee2b0e54a5e46b42e440f2647569b9e0cc003d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/INftfiHub.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title INftfiHub\\n * @author NFTfi\\n * @dev NftfiHub interface\\n */\\ninterface INftfiHub {\\n    function setContract(string calldata _contractKey, address _contractAddress) external;\\n\\n    function getContract(bytes32 _contractKey) external view returns (address);\\n}\\n\",\"keccak256\":\"0x65320571d7049eefd4bfd6dcff48b752a4a01c56a23ae7acf0f3b7183b9b08db\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPermittedNFTs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\ninterface IPermittedNFTs {\\n    function setNFTPermit(address _nftContract, string memory _nftType) external;\\n\\n    function getNFTPermit(address _nftContract) external view returns (bytes32);\\n\\n    function getNFTWrapper(address _nftContract) external view returns (address);\\n\\n    function getNftTypeWrapper(bytes32 _nftType) external view returns (address);\\n}\\n\",\"keccak256\":\"0x502a60d661c15f42ff3e06dd76236a0c4dff356519b6d609fdcd8d1ea32a5256\",\"license\":\"BUSL-1.1\"},\"contracts/loans/LoanCoordinator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\nimport {SmartNft} from \\\"../smartNft/SmartNft.sol\\\";\\nimport {ILoanCoordinator} from \\\"../interfaces/ILoanCoordinator.sol\\\";\\nimport {INftfiHub} from \\\"../interfaces/INftfiHub.sol\\\";\\nimport {Ownable} from \\\"../utils/Ownable.sol\\\";\\nimport {ContractKeyUtils} from \\\"../utils/ContractKeyUtils.sol\\\";\\n\\n/**\\n * @title  LoanCoordinator\\n * @author NFTfi\\n * @notice This contract is in charge of coordinating the creation, distribution and desctruction of the SmartNfts\\n * related to a loan, the Promossory Note and Obligaiton Receipt.\\n */\\ncontract LoanCoordinator is ILoanCoordinator, Ownable {\\n    /* ******* */\\n    /* STORAGE */\\n    /* ******* */\\n\\n    // solhint-disable-next-line immutable-vars-naming\\n    INftfiHub public immutable hub;\\n\\n    /**\\n     * @dev For each loan type, records the address of the contract that implements the type\\n     */\\n    mapping(bytes32 loanType => address offerAddress) private _defaultLoanContractForOfferType;\\n    /**\\n     * @dev reverse mapping of offerTypes - for each contract address, records the associated loan type\\n     */\\n    mapping(address offerAddress => bytes32 loanType) private _typeOfLoanContract;\\n\\n    mapping(address => bool) private _isLoanContractDisabled;\\n\\n    /**\\n     * @notice A continuously increasing counter that simultaneously allows every loan to have a unique ID and provides\\n     * a running count of how many loans have been started by this contract.\\n     */\\n    uint32 public totalNumLoans = 0;\\n\\n    uint32 public smartNftIdCounter = 0;\\n\\n    // The address that deployed this contract\\n    // solhint-disable-next-line immutable-vars-naming\\n    address private immutable _deployer;\\n    bool private _initialized = false;\\n\\n    mapping(uint32 => Loan) private loans;\\n\\n    address public override promissoryNoteToken;\\n    address public override obligationReceiptToken;\\n\\n    /**\\n     * @notice A mapping that takes both a user's address and a loan nonce that was first used when signing an off-chain\\n     * order and checks whether that nonce has previously either been used for a loan, or has been pre-emptively\\n     * cancelled. The nonce referred to here is not the same as an Ethereum account's nonce. We are referring instead to\\n     * nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi orders.\\n     *\\n     * These nonces can be any uint256 value that the user has not previously used to sign an off-chain order. Each\\n     * nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower\\n     * in that situation. This serves two purposes. First, it prevents replay attacks where an attacker would submit a\\n     * user's off-chain order more than once. Second, it allows a user to cancel an off-chain order by calling\\n     * NFTfi.cancelLoanCommitment(), which marks the nonce as used and prevents any future loan from\\n     * using the user's off-chain order that contains that nonce.\\n     */\\n    mapping(bytes32 offerType => mapping(address user => mapping(uint256 nonce => bool nonceHasBeenUsed)))\\n        internal _nonceHasBeenUsedForUserByOfferType;\\n\\n    /* ****** */\\n    /* EVENTS */\\n    /* ****** */\\n\\n    event UpdateStatus(uint32 indexed loanId, address indexed loanContract, StatusType newStatus);\\n\\n    /**\\n     * @notice This event is fired whenever the admins register a loan type.\\n     *\\n     * @param offerType - offer type represented by keccak256('offer type').\\n     * @param loanContract - Address of the loan type contract.\\n     */\\n    event TypeUpdated(bytes32 indexed offerType, address indexed loanContract);\\n\\n    /* ************* */\\n    /* CUSTOM ERRORS */\\n    /* ************* */\\n\\n    error NotInitialized();\\n    error OnlyDeployer();\\n    error AlreadyInitialized();\\n    error ObligationReceiptZeroAddress();\\n    error PromissoryNoteZeroAddress();\\n    error ObligationReceiptAlreadyExists();\\n    error PromissoryNoteAlreadyExists();\\n    error NotRegisteredLoanContract();\\n    error DisabledLoanContract();\\n    error PromissoryNoteDoesntExist();\\n    error LoanStatusMustBeNEW();\\n    error CallerNotLoanCreatorContract();\\n    error OfferTypeIsEmpty();\\n    error LoanContractAlreadyRegistered();\\n    error FunctionInformationArityMismatch();\\n    error InvalidNonce();\\n\\n    /**\\n     * @dev Function using this modifier can only be executed after this contract is initialized\\n     *\\n     */\\n    modifier onlyInitialized() {\\n        if (!_initialized) revert NotInitialized();\\n        _;\\n    }\\n\\n    /* *********** */\\n    /* CONSTRUCTOR */\\n    /* *********** */\\n\\n    /**\\n     * @notice Sets the admin of the contract.\\n     * Initializes `contractTypes` with a batch of loan types. Sets `NftfiHub`.\\n     *\\n     * @param  _nftfiHub - Address of the NftfiHub contract\\n     * @param _admin - Initial admin of this contract.\\n     * @param _offerTypes - offer types represented by keccak256('offer type').\\n     * @param _loanContracts - The addresses of each wrapper contract that implements the loan type's behaviour.\\n     */\\n    constructor(\\n        address _nftfiHub,\\n        address _admin,\\n        string[] memory _offerTypes,\\n        address[] memory _loanContracts\\n    ) Ownable(_admin) {\\n        hub = INftfiHub(_nftfiHub);\\n        _deployer = msg.sender;\\n        _registerOfferTypes(_offerTypes, _loanContracts);\\n    }\\n\\n    /**\\n     * @dev Sets `promissoryNoteToken` and `obligationReceiptToken`.\\n     * It can be executed once by the deployer.\\n     *\\n     * @param  _promissoryNoteToken - Promissory Note Token address\\n     * @param  _obligationReceiptToken - Obligaiton Recipt Token address\\n     */\\n    function initialize(address _promissoryNoteToken, address _obligationReceiptToken) external {\\n        if (msg.sender != _deployer) revert OnlyDeployer();\\n        if (_initialized) revert AlreadyInitialized();\\n        if (_promissoryNoteToken == address(0)) revert PromissoryNoteZeroAddress();\\n        if (_obligationReceiptToken == address(0)) revert ObligationReceiptZeroAddress();\\n\\n        _initialized = true;\\n        promissoryNoteToken = _promissoryNoteToken;\\n        obligationReceiptToken = _obligationReceiptToken;\\n    }\\n\\n    /**\\n     * @dev This is called by the OfferType beginning the new loan.\\n     * It initialize the new loan data, and returns the new loan id.\\n     */\\n    function registerLoan() external override onlyInitialized returns (uint32) {\\n        address loanContract = msg.sender;\\n\\n        if (_typeOfLoanContract[loanContract] == bytes32(0)) revert NotRegisteredLoanContract();\\n        if (_isLoanContractDisabled[loanContract]) revert DisabledLoanContract();\\n\\n        // (loanIds start at 1)\\n        totalNumLoans += 1;\\n        Loan memory newLoan = Loan({status: StatusType.NEW, loanContract: loanContract, smartNftId: 0});\\n\\n        loans[totalNumLoans] = newLoan;\\n        emit UpdateStatus(totalNumLoans, loanContract, StatusType.NEW);\\n\\n        return totalNumLoans;\\n    }\\n\\n    /**\\n     * @notice Mints a Promissory Note SmartNFT for the lender. Must be called by corresponding loan type\\n     *\\n     * @param _loanId - The ID of the loan.\\n     * @param _lender - The address of the lender.\\n     */\\n    function mintPromissoryNote(uint32 _loanId, address _lender) external onlyInitialized {\\n        address loanContract = msg.sender;\\n\\n        if (_typeOfLoanContract[loanContract] == bytes32(0)) revert NotRegisteredLoanContract();\\n\\n        // create smartNFTid to match the id of the promissory note if promissory note doens't exist\\n        uint64 smartNftId = loans[_loanId].smartNftId;\\n        if (smartNftId == 0) {\\n            smartNftIdCounter += 1;\\n            smartNftId = uint64(uint256(keccak256(abi.encodePacked(address(this), smartNftIdCounter))));\\n        }\\n\\n        if (loans[_loanId].status != StatusType.NEW) revert LoanStatusMustBeNEW();\\n        if (SmartNft(promissoryNoteToken).exists(smartNftId)) revert PromissoryNoteAlreadyExists();\\n\\n        loans[_loanId].smartNftId = smartNftId;\\n        // Issue an ERC721 promissory note to the lender that gives them the\\n        // right to either the principal-plus-interest or the collateral.\\n        SmartNft(promissoryNoteToken).mint(_lender, smartNftId, abi.encode(_loanId));\\n    }\\n\\n    /**\\n     * @notice Mints an Obligation Receipt SmartNFT for the borrower. Must be called by corresponding loan type\\n     *\\n     * @param _loanId - The ID of the loan.\\n     * @param _borrower - The address of the borrower.\\n     */\\n    function mintObligationReceipt(uint32 _loanId, address _borrower) external override onlyInitialized {\\n        address loanContract = msg.sender;\\n\\n        if (_typeOfLoanContract[loanContract] == bytes32(0)) revert NotRegisteredLoanContract();\\n\\n        // create smartNFTid to match the id of the promissory note if promissory note doens't exist\\n        uint64 smartNftId = loans[_loanId].smartNftId;\\n        if (smartNftId == 0) {\\n            smartNftIdCounter += 1;\\n            smartNftId = uint64(uint256(keccak256(abi.encodePacked(address(this), smartNftIdCounter))));\\n        }\\n\\n        if (loans[_loanId].status != StatusType.NEW) revert LoanStatusMustBeNEW();\\n        if (SmartNft(obligationReceiptToken).exists(smartNftId)) revert ObligationReceiptAlreadyExists();\\n\\n        loans[_loanId].smartNftId = smartNftId;\\n        // Issue an ERC721 obligation receipt to the borrower that gives them the\\n        // right to pay back the loan and get the collateral back.\\n        SmartNft(obligationReceiptToken).mint(_borrower, smartNftId, abi.encode(_loanId));\\n    }\\n\\n    /**\\n     * @notice Resets the SmartNFTs associated with a loan.\\n     *\\n     * @param _loanId - The ID of the loan.\\n     */\\n    function resetSmartNfts(uint32 _loanId) external override onlyInitialized {\\n        address loanContract = msg.sender;\\n\\n        if (_typeOfLoanContract[loanContract] == bytes32(0)) revert NotRegisteredLoanContract();\\n\\n        uint64 oldSmartNftId = loans[_loanId].smartNftId;\\n        if (loans[_loanId].status != StatusType.NEW) revert LoanStatusMustBeNEW();\\n\\n        if (SmartNft(promissoryNoteToken).exists(oldSmartNftId)) {\\n            SmartNft(promissoryNoteToken).burn(oldSmartNftId);\\n        }\\n\\n        if (SmartNft(obligationReceiptToken).exists(oldSmartNftId)) {\\n            SmartNft(obligationReceiptToken).burn(oldSmartNftId);\\n        }\\n    }\\n\\n    /**\\n     * @dev This is called by the OfferType who created the loan, when a loan is resolved whether by paying back or\\n     * liquidating the loan.\\n     * It sets the loan as `RESOLVED` and burns both PromossoryNote and ObligationReceipt SmartNft's.\\n     *\\n     * @param _loanId - Id of the loan\\n     */\\n    function resolveLoan(uint32 _loanId, bool _repaid) external override onlyInitialized {\\n        Loan storage loan = loans[_loanId];\\n\\n        if (loan.status != StatusType.NEW) revert LoanStatusMustBeNEW();\\n\\n        if (loan.loanContract != msg.sender) revert CallerNotLoanCreatorContract();\\n\\n        if (_repaid) {\\n            loan.status = StatusType.REPAID;\\n        } else {\\n            loan.status = StatusType.LIQUIDATED;\\n        }\\n\\n        if (SmartNft(promissoryNoteToken).exists(loan.smartNftId)) {\\n            SmartNft(promissoryNoteToken).burn(loan.smartNftId);\\n        }\\n\\n        if (SmartNft(obligationReceiptToken).exists(loan.smartNftId)) {\\n            SmartNft(obligationReceiptToken).burn(loan.smartNftId);\\n        }\\n\\n        emit UpdateStatus(_loanId, msg.sender, loan.status);\\n    }\\n\\n    /**\\n     * @dev Returns loan's data for a given id.\\n     *\\n     * @param _loanId - Id of the loan\\n     */\\n    function getLoanData(uint32 _loanId) external view override returns (Loan memory) {\\n        return loans[_loanId];\\n    }\\n\\n    /**\\n     * @dev Returns loan's data and offerType for a given loan id.\\n     *\\n     * @param _loanId - Id of the loan\\n     */\\n    function getLoanDataAndOfferType(uint32 _loanId) external view returns (Loan memory, bytes32) {\\n        Loan memory loan = loans[_loanId];\\n        return (loan, _typeOfLoanContract[loan.loanContract]);\\n    }\\n\\n    /**\\n     * @dev checks if the given id is valid for the given loan contract address\\n     * @param _loanId - Id of the loan\\n     * @param _loanContract - address og the loan contract\\n     */\\n    function isValidLoanId(uint32 _loanId, address _loanContract) external view override returns (bool validity) {\\n        validity = loans[_loanId].loanContract == _loanContract;\\n    }\\n\\n    /**\\n     * @notice  Set or update the contract address that implements the given Loan Type.\\n     * Set address(0) for a loan type for un-register such type.\\n     *\\n     * @param _offerType - Loan type represented by 'loan type'.\\n     * @param _loanContract - The address of the wrapper contract that implements the loan type's behaviour.\\n     */\\n    function registerOfferType(string memory _offerType, address _loanContract) external onlyOwner {\\n        _registerOfferType(_offerType, _loanContract);\\n    }\\n\\n    /**\\n     * @notice Deletes the contract address associated with a given Loan Type.\\n     *\\n     * @param _offerType - Loan type represented by 'loan type'.\\n     * @param _loanContract - The address of the wrapper contract to be deleted.\\n     */\\n    function deleteOfferType(string memory _offerType, address _loanContract) external onlyOwner {\\n        bytes32 offerTypeKey = ContractKeyUtils.getIdFromStringKey(_offerType);\\n\\n        delete _typeOfLoanContract[_loanContract];\\n        if (_defaultLoanContractForOfferType[offerTypeKey] == _loanContract) {\\n            delete _defaultLoanContractForOfferType[offerTypeKey];\\n        }\\n    }\\n\\n    /**\\n     * @notice Disables a loan contract. Makes it impossible for a loan contract to register a new loan,\\n     * altough renegotiations of their existing loans and repayment/liquidations are still possible\\n     *\\n     * @param _loanContract - The address of the loan contract to be disabled.\\n     */\\n    function disableLoanContract(address _loanContract) external onlyOwner {\\n        _isLoanContractDisabled[_loanContract] = true;\\n    }\\n\\n    /**\\n     * @notice Enables a loan contract.\\n     *\\n     * @param _loanContract - The address of the loan contract to be enabled.\\n     */\\n    function enableLoanContract(address _loanContract) external onlyOwner {\\n        _isLoanContractDisabled[_loanContract] = false;\\n    }\\n\\n    /**\\n     * @notice  Batch set or update the contract addresses that implement the given batch Loan Type.\\n     * Set address(0) for a loan type for un-register such type.\\n     *\\n     * @param _offerTypes - Loan types represented by 'loan type'.\\n     * @param _loanContracts - The addresses of each wrapper contract that implements the loan type's behaviour.\\n     */\\n    function registerOfferTypes(string[] memory _offerTypes, address[] memory _loanContracts) external onlyOwner {\\n        _registerOfferTypes(_offerTypes, _loanContracts);\\n    }\\n\\n    /**\\n     * @notice This function can be called by anyone to get the latest\\n     * contract address that implements the given loan type.\\n     *\\n     * @param  _offerType - The loan type, e.g. bytes32(\\\"ASSET_OFFER_LOAN\\\")\\n     */\\n    function getDefaultLoanContractForOfferType(bytes32 _offerType) public view override returns (address) {\\n        return _defaultLoanContractForOfferType[_offerType];\\n    }\\n\\n    /**\\n     * @notice This function can be called by anyone to get the loan type of the given contract address.\\n     *\\n     * @param  _loanContract - The loan contract\\n     */\\n    function getTypeOfLoanContract(address _loanContract) public view override returns (bytes32) {\\n        return _typeOfLoanContract[_loanContract];\\n    }\\n\\n    /**\\n     * @notice Checks if a loan contract is disabled.\\n     *\\n     * @param _loanContract - The loan contract address.\\n     * @return bool - True if disabled, false otherwise.\\n     */\\n    function isLoanContractDisabled(address _loanContract) external view returns (bool) {\\n        return _isLoanContractDisabled[_loanContract];\\n    }\\n\\n    /**\\n     * @notice  Set or update the contract address that implements the given Loan Type.\\n     * Set address(0) for a loan type for un-register such type.\\n     *\\n     * @param _offerType - Loan type represented by 'loan type').\\n     * @param _loanContract - The address of the wrapper contract that implements the loan type's behaviour.\\n     */\\n    function _registerOfferType(string memory _offerType, address _loanContract) internal {\\n        if (bytes(_offerType).length == 0) revert OfferTypeIsEmpty();\\n        bytes32 offerTypeKey = ContractKeyUtils.getIdFromStringKey(_offerType);\\n\\n        // delete loan contract address of old typeKey registered to this loan contract address\\n\\n        if (_typeOfLoanContract[_loanContract] != bytes32(0)) revert LoanContractAlreadyRegistered();\\n\\n        _defaultLoanContractForOfferType[offerTypeKey] = _loanContract;\\n        _typeOfLoanContract[_loanContract] = offerTypeKey;\\n\\n        emit TypeUpdated(offerTypeKey, _loanContract);\\n    }\\n\\n    /**\\n     * @notice  Batch set or update the contract addresses that implement the given batch Loan Type.\\n     * Set address(0) for a loan type for un-register such type.\\n     *\\n     * @param _offerTypes - Loan types represented by keccak256('loan type').\\n     * @param _loanContracts - The addresses of each wrapper contract that implements the loan type's behaviour.\\n     */\\n    function _registerOfferTypes(string[] memory _offerTypes, address[] memory _loanContracts) internal {\\n        if (_offerTypes.length != _loanContracts.length) revert FunctionInformationArityMismatch();\\n\\n        for (uint256 i; i < _offerTypes.length; ++i) {\\n            _registerOfferType(_offerTypes[i], _loanContracts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice This function can be called by either a lender or a borrower to cancel all off-chain orders that they\\n     * have signed that contain this nonce. If the off-chain orders were created correctly, there should only be one\\n     * off-chain order that contains this nonce at all.\\n     *\\n     * The nonce referred to here is not the same as an Ethereum account's nonce. We are referring\\n     * instead to nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi\\n     * orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain order.\\n     * Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the\\n     * borrower in that situation. This serves two purposes. First, it prevents replay attacks where an attacker would\\n     * submit a user's off-chain order more than once. Second, it allows a user to cancel an off-chain order by calling\\n     * NFTfi.cancelLoanCommitment(), which marks the nonce as used and prevents any future loan from\\n     * using the user's off-chain order that contains that nonce.\\n     *\\n     * @param  _nonce - User nonce\\n     */\\n    function cancelLoanCommitment(bytes32 _offerType, uint256 _nonce) external {\\n        if (_nonceHasBeenUsedForUserByOfferType[_offerType][msg.sender][_nonce]) {\\n            revert InvalidNonce();\\n        }\\n        _nonceHasBeenUsedForUserByOfferType[_offerType][msg.sender][_nonce] = true;\\n    }\\n\\n    /**\\n     * @notice This function can be used to view whether a particular nonce for a particular user has already been used,\\n     * either from a successful loan or a cancelled off-chain order.\\n     *\\n     * @param _user - The address of the user. This function works for both lenders and borrowers alike.\\n     * @param  _nonce - The nonce referred to here is not the same as an Ethereum account's nonce. We are referring\\n     * instead to nonces that are used by both the lender and the borrower when they are first signing off-chain\\n     * NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain\\n     * order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or\\n     * the borrower in that situation. This serves two purposes:\\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitment()\\n     * , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains\\n     * that nonce.\\n     *\\n     * @return A bool representing whether or not this nonce has been used for this user.\\n     */\\n    function getWhetherNonceHasBeenUsedForUser(\\n        bytes32 _offerType,\\n        address _user,\\n        uint256 _nonce\\n    ) external view returns (bool) {\\n        return _nonceHasBeenUsedForUserByOfferType[_offerType][_user][_nonce];\\n    }\\n\\n    /**\\n     * @notice Checks if a nonce is valid.\\n     *\\n     * @param _user - The address of the user.\\n     * @param _nonce - The nonce to be checked.\\n     */\\n    function checkNonce(address _user, uint256 _nonce) public view override {\\n        bytes32 offerType = _typeOfLoanContract[msg.sender];\\n        if (_nonceHasBeenUsedForUserByOfferType[offerType][_user][_nonce]) {\\n            revert InvalidNonce();\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks and invalidates a nonce for a user.\\n     *\\n     * @param _user - The address of the user.\\n     * @param _nonce - The nonce to be checked and invalidated.\\n     */\\n    function checkAndInvalidateNonce(address _user, uint256 _nonce) external override {\\n        bytes32 offerType = _typeOfLoanContract[msg.sender];\\n        if (_nonceHasBeenUsedForUserByOfferType[offerType][_user][_nonce]) {\\n            revert InvalidNonce();\\n        }\\n        _nonceHasBeenUsedForUserByOfferType[offerType][_user][_nonce] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x036d023e140125bcf26a0b1038f638c0daa2bc3415c40cf34fedaa596e7c4a0e\",\"license\":\"BUSL-1.1\"},\"contracts/smartNft/SmartNft.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport {INftfiHub} from \\\"../interfaces/INftfiHub.sol\\\";\\n\\n/**\\n * @title SmartNft\\n * @author NFTfi\\n * @dev An ERC721 token which represents a very basic implementation of the NFTfi V2 SmartNFT.\\n */\\ncontract SmartNft is ERC721, AccessControl {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    /**\\n     * @dev This struct contains data needed to find the loan linked to a SmartNft.\\n     */\\n    struct Loan {\\n        address loanCoordinator;\\n        uint256 loanId;\\n    }\\n\\n    /* ******* */\\n    /* STORAGE */\\n    /* ******* */\\n\\n    bytes32 public constant LOAN_COORDINATOR_ROLE = keccak256(\\\"LOAN_COORDINATOR_ROLE\\\");\\n    bytes32 public constant BASE_URI_ROLE = keccak256(\\\"BASE_URI_ROLE\\\");\\n\\n    // solhint-disable-next-line immutable-vars-naming\\n    INftfiHub public immutable hub;\\n\\n    // smartNftId => Loan\\n    mapping(uint256 => Loan) public loans;\\n\\n    string public baseURI;\\n\\n    /**\\n     * @dev Grants the contract the default admin role to `_admin`.\\n     * Grants LOAN_COORDINATOR_ROLE to `_loanCoordinator`.\\n     *\\n     * @param _admin - Account to set as the admin of roles\\n     * @param _nftfiHub - Address of the NftfiHub contract\\n     * @param _loanCoordinator - Initial loan coordinator\\n     * @param _name - Name for the SmarNFT\\n     * @param _symbol - Symbol for the SmarNFT\\n     * @param _customBaseURI - Base URI for the SmarNFT\\n     */\\n    constructor(\\n        address _admin,\\n        address _nftfiHub,\\n        address _loanCoordinator,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _customBaseURI\\n    ) ERC721(_name, _symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _setupRole(BASE_URI_ROLE, _admin);\\n        _setupRole(LOAN_COORDINATOR_ROLE, _loanCoordinator);\\n        _setBaseURI(_customBaseURI);\\n        hub = INftfiHub(_nftfiHub);\\n    }\\n\\n    /**\\n     * @dev Grants LOAN_COORDINATOR_ROLE to `_account`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function setLoanCoordinator(address _account) external {\\n        grantRole(LOAN_COORDINATOR_ROLE, _account);\\n    }\\n\\n    /**\\n     * @dev Mints a new token with `_tokenId` and assigne to `_to`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have `LOAN_COORDINATOR_ROLE` role.\\n     *\\n     * @param _to The address reciving the SmartNft\\n     * @param _tokenId The id of the new SmartNft\\n     * @param _data Up to the first 32 bytes contains an integer which represents the loanId linked to the SmartNft\\n     */\\n    function mint(address _to, uint256 _tokenId, bytes calldata _data) external onlyRole(LOAN_COORDINATOR_ROLE) {\\n        // solhint-disable-next-line custom-errors\\n        require(_data.length > 0, \\\"data must contain loanId\\\");\\n        uint256 loanId = abi.decode(_data, (uint256));\\n        loans[_tokenId] = Loan({loanCoordinator: msg.sender, loanId: loanId});\\n        _safeMint(_to, _tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Burns `_tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have `LOAN_COORDINATOR_ROLE` role.\\n     */\\n    function burn(uint256 _tokenId) external onlyRole(LOAN_COORDINATOR_ROLE) {\\n        _burn(_tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets baseURI.\\n     * @param _customBaseURI - Base URI for the SmarNFT\\n     */\\n    function setBaseURI(string memory _customBaseURI) external onlyRole(BASE_URI_ROLE) {\\n        _setBaseURI(_customBaseURI);\\n    }\\n\\n    function exists(uint256 _tokenId) external view returns (bool) {\\n        return _exists(_tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override(ERC721, AccessControl) returns (bool) {\\n        return super.supportsInterface(_interfaceId);\\n    }\\n\\n    /**\\n     * @dev Sets baseURI.\\n     */\\n    function _setBaseURI(string memory _customBaseURI) internal virtual {\\n        baseURI = bytes(_customBaseURI).length > 0\\n            ? string(abi.encodePacked(_customBaseURI, _getChainID().toString(), \\\"/\\\"))\\n            : \\\"\\\";\\n    }\\n\\n    /** @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`.\\n     */\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    /**\\n     * @dev This function gets the current chain ID.\\n     */\\n    function _getChainID() internal view returns (uint256) {\\n        uint256 id;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n}\\n\",\"keccak256\":\"0x7753f4958529eace66b519f0c7691253d7f530173af1c7c55ebaf8edb5f90479\",\"license\":\"BUSL-1.1\"},\"contracts/utils/ContractKeyUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title ContractKeyUtils\\n * @author NFTfi\\n * @dev Common library for contract key utils\\n */\\nlibrary ContractKeyUtils {\\n    /**\\n     * @notice Returns the bytes32 representation of a string\\n     * @param _key the string key\\n     * @return id bytes32 representation\\n     */\\n    function getIdFromStringKey(string memory _key) public pure returns (bytes32 id) {\\n        // solhint-disable-next-line custom-errors\\n        require(bytes(_key).length <= 32, \\\"invalid key\\\");\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := mload(add(_key, 32))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x132d85863f84cf1aa7061ea3ef35a6eafdcc56c6be22efe4370d98939e3cd744\",\"license\":\"BUSL-1.1\"},\"contracts/utils/ContractKeys.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title ContractKeys\\n * @author NFTfi\\n * @dev Common library for contract keys\\n */\\nlibrary ContractKeys {\\n    bytes32 public constant PERMITTED_ERC20S = bytes32(\\\"PERMITTED_ERC20S\\\");\\n    bytes32 public constant PERMITTED_NFTS = bytes32(\\\"PERMITTED_NFTS\\\");\\n    bytes32 public constant NFT_TYPE_REGISTRY = bytes32(\\\"NFT_TYPE_REGISTRY\\\");\\n    bytes32 public constant LOAN_COORDINATOR = bytes32(\\\"LOAN_COORDINATOR\\\");\\n    bytes32 public constant PERMITTED_SNFT_RECEIVER = bytes32(\\\"PERMITTED_SNFT_RECEIVER\\\");\\n    bytes32 public constant ESCROW = bytes32(\\\"ESCROW\\\");\\n    bytes32 public constant ERC20_TRANSFER_MANAGER = bytes32(\\\"ERC20_TRANSFER_MANAGER\\\");\\n    bytes32 public constant PERSONAL_ESCROW_FACTORY = bytes32(\\\"PERSONAL_ESCROW_FACTORY\\\");\\n    bytes32 public constant DELEGATE_PLUGIN = bytes32(\\\"DELEGATE_PLUGIN\\\");\\n}\\n\",\"keccak256\":\"0xf1902acf71f608772e0c4139a16701b2643c6f5314ad07bb622f09616e02e4eb\",\"license\":\"BUSL-1.1\"},\"contracts/utils/NftReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {IERC1155Receiver, IERC165} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport {ERC721Holder, IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\n\\n/**\\n * @title NftReceiver\\n * @author NFTfi\\n * @dev Base contract with capabilities for receiving ERC1155 and ERC721 tokens\\n */\\nabstract contract NftReceiver is IERC1155Receiver, ERC721Holder {\\n    /**\\n     *  @dev Handles the receipt of a single ERC1155 token type. This function is called at the end of a\\n     * `safeTransferFrom` after the balance has been updated.\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if allowed\\n     */\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     *  @dev Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a\\n     * `safeBatchTransferFrom` after the balances have been updated.\\n     *  @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external virtual override returns (bytes4) {\\n        // solhint-disable-next-line custom-errors\\n        revert(\\\"ERC1155 batch not supported\\\");\\n    }\\n\\n    /**\\n     * @dev Checks whether this contract implements the interface defined by `interfaceId`.\\n     * @param _interfaceId Id of the interface\\n     * @return true if this contract implements the interface\\n     */\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return\\n            _interfaceId == type(IERC1155Receiver).interfaceId ||\\n            _interfaceId == type(IERC721Receiver).interfaceId ||\\n            _interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x95fc127460e3df3c8be279f2aa44050b5a4ff7ca2a151f36e95ee687c5daf979\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * Modified version from openzeppelin/contracts/access/Ownable.sol that allows to\\n * initialize the owner using a parameter in the constructor\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    address private _ownerCandidate;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        // solhint-disable-next-line custom-errors\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor(address _initialOwner) {\\n        _setOwner(_initialOwner);\\n    }\\n\\n    /**\\n     * @dev Requests transferring ownership of the contract to a new account (`_newOwnerCandidate`).\\n     * Can only be called by the current owner.\\n     */\\n    function requestTransferOwnership(address _newOwnerCandidate) public virtual onlyOwner {\\n        // solhint-disable-next-line custom-errors\\n        require(_newOwnerCandidate != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _ownerCandidate = _newOwnerCandidate;\\n    }\\n\\n    function acceptTransferOwnership() public virtual {\\n        // solhint-disable-next-line custom-errors\\n        require(_ownerCandidate == _msgSender(), \\\"Ownable: not owner candidate\\\");\\n        _setOwner(_ownerCandidate);\\n        delete _ownerCandidate;\\n    }\\n\\n    function cancelTransferOwnership() public virtual onlyOwner {\\n        delete _ownerCandidate;\\n    }\\n\\n    function rejectTransferOwnership() public virtual {\\n        // solhint-disable-next-line custom-errors\\n        require(_ownerCandidate == _msgSender(), \\\"Ownable: not owner candidate\\\");\\n        delete _ownerCandidate;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Sets the owner.\\n     */\\n    function _setOwner(address _newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = _newOwner;\\n        emit OwnershipTransferred(oldOwner, _newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x4f1dc29ae64fcd354c09865ae56d8a3612541ebfc9db9b87b7af6f18ca36cf65\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001f1038038062001f108339810160408190526200003491620000c1565b81620000408162000054565b506001600160a01b031660805250620000f9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000bc57600080fd5b919050565b60008060408385031215620000d557600080fd5b620000e083620000a4565b9150620000f060208401620000a4565b90509250929050565b608051611de66200012a6000396000818161020401528181610453015281816107000152610c700152611de66000f3fe608060405234801561001057600080fd5b506004361061016b5760003560e01c80637b49f5bf116100cd578063a4d95b6411610081578063d8867fc811610066578063d8867fc8146102fa578063f23a6e611461030d578063fa3eec241461034657600080fd5b8063a4d95b64146102d4578063bc197c81146102e757600080fd5b80638da5cb5b116100b25780638da5cb5b146102a857806392fede00146102b95780639d6fa618146102c157600080fd5b80637b49f5bf146102745780637deba1cf1461028757600080fd5b8063365a86fc116101245780635f992fdd116101095780635f992fdd146102515780636c817965146102595780637b3711071461026c57600080fd5b8063365a86fc146101ff57806336e254971461023e57600080fd5b80630a76e196116101555780630a76e196146101ad578063150b7a02146101c05780632c1d4ec2146101ec57600080fd5b8062f2a6ab1461017057806301ffc9a714610185575b600080fd5b61018361017e3660046117ff565b610389565b005b610198610193366004611841565b6105a1565b60405190151581526020015b60405180910390f35b6101836101bb3660046118fe565b610625565b6101d36101ce36600461199e565b6107f0565b6040516001600160e01b031990911681526020016101a4565b6101836101fa3660046117ff565b610801565b6102267f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101a4565b61018361024c366004611a0a565b61097a565b610183610a2c565b610183610267366004611a3b565b610aa5565b610183610bc9565b610183610282366004611a0a565b610c38565b61029a610295366004611a7c565b610dfe565b6040516101a4929190611b1c565b6000546001600160a01b0316610226565b610183610eb1565b6101836102cf366004611b37565b610f0b565b6101836102e2366004611b37565b611010565b6101d36102f5366004611bdb565b61108b565b610183610308366004611b37565b6110d6565b6101d361031b366004611c9a565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b6101986103543660046117ff565b6001600160a01b0392831660009081526002602090815260408083209483529381528382209290941681529252902054151590565b6000546001600160a01b031633146103e85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b03831660009081526003602090815260408083208584529091529020541561042a57604051636a32439f60e01b815260040160405180910390fd5b604051631c2d8fb360e31b81526d5045524d49545445445f4e46545360901b60048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e16c7d9890602401602060405180830381865afa1580156104a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c69190611d16565b6040517fb8c8aff80000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152919091169063b8c8aff890602401602060405180830381865afa158015610527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054b9190611d16565b9050610558818585611154565b61058e576040517ff8e7510e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61059b818585308661121b565b50505050565b60006001600160e01b031982167f4e2312e00000000000000000000000000000000000000000000000000000000014806105eb57506001600160e01b03198216630a85bd0160e11b145b8061061f57506001600160e01b031982167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b6000546001600160a01b0316331461067f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103df565b6001600160a01b0383166000908152600360209081526040808320858452909152902054156106c157604051636a32439f60e01b815260040160405180910390fd5b60006106cc856112c7565b604051631c2d8fb360e31b81526d5045524d49545445445f4e46545360901b60048201529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e16c7d9890602401602060405180830381865afa158015610747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076b9190611d16565b6001600160a01b0316631a3dd0a5836040518263ffffffff1660e01b815260040161079891815260200190565b602060405180830381865afa1580156107b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d99190611d16565b90506107e8818686308761121b565b505050505050565b630a85bd0160e11b5b949350505050565b6000546001600160a01b0316331461085b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103df565b6001600160a01b03831660009081526003602090815260408083208584529091529020541561089d57604051636a32439f60e01b815260040160405180910390fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015283906000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156108ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109239190611d33565b90508060000361095f576040517f6d672af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109736001600160a01b0383168486611323565b5050505050565b6001600160a01b038316600090815260026020908152604080832085845282528083203384529091528120548491849190036109c957604051636374b7a760e11b815260040160405180910390fd5b6109d38585611393565b6109e0868686308761121b565b6040513381526001600160a01b038085169186918816907f9abe13faa6aaae81ab2cd561cc29d1d0fafec53dca1f0d553a759be6f8fb0d749060200160405180910390a4505050505050565b6001546001600160a01b03163314610a865760405162461bcd60e51b815260206004820152601c60248201527f4f776e61626c653a206e6f74206f776e65722063616e6469646174650000000060448201526064016103df565b6001805473ffffffffffffffffffffffffffffffffffffffff19169055565b6001600160a01b03821660009081526002602090815260408083208484528252808320338452909152812054839183919003610af457604051636374b7a760e11b815260040160405180910390fd5b6001600160a01b038416600090815260026020908152604080832086845282528083203384529091528120805460019290610b30908490611d62565b90915550506001600160a01b03808516600090815260026020908152604080832087845282528083209389168352929052908120805460019290610b75908490611d75565b9091555050604080513381526001600160a01b0387811660208301528592908716917f74328a3c2ab7afcb5773532d342940a2df414b9866cac572f01ec5e65ea6bd29910160405180910390a35050505050565b6001546001600160a01b03163314610c235760405162461bcd60e51b815260206004820152601c60248201527f4f776e61626c653a206e6f74206f776e65722063616e6469646174650000000060448201526064016103df565b600154610a86906001600160a01b0316611411565b604051631c2d8fb360e31b81527f4c4f414e5f434f4f5244494e41544f520000000000000000000000000000000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e16c7d9890602401602060405180830381865afa158015610cbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce39190611d16565b6040517f78a7fa670000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0391909116906378a7fa6790602401602060405180830381865afa158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d669190611d33565b03610d9d576040517f5fb3e02f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610da7838361146e565b610db4848484843061121b565b6040513381526001600160a01b038083169184918616907fb5f411fa3c897c9b0b6cd61852278a67e73d885610724a5610a8580d3e94cfdb9060200160405180910390a450505050565b3360009081526004602052604081205460609060ff16610e4a576040517ff4d1650600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b836001600160a01b031683604051610e629190611d88565b6000604051808303816000865af19150503d8060008114610e9f576040519150601f19603f3d011682016040523d82523d6000602084013e610ea4565b606091505b50915091505b9250929050565b6000546001600160a01b03163314610a865760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103df565b6000546001600160a01b03163314610f655760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103df565b6001600160a01b038116610fe15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103df565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461106a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103df565b6001600160a01b03166000908152600460205260409020805460ff19169055565b60405162461bcd60e51b815260206004820152601b60248201527f45524331313535206261746368206e6f7420737570706f72746564000000000060448201526000906064016103df565b6000546001600160a01b031633146111305760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103df565b6001600160a01b03166000908152600460205260409020805460ff19166001179055565b604080513060248201526001600160a01b038416604482015260648082018490528251808303909101815260849091018252602080820180516001600160e01b03167ff370e8c5000000000000000000000000000000000000000000000000000000001790528251808401909352601683527f4f776e65727368697020636865636b206661696c6564000000000000000000009083015260009182916111fc918791906114e3565b9050808060200190518101906112129190611da4565b95945050505050565b604080516001600160a01b03848116602483015283811660448301528616606482015260848082018690528251808303909101815260a49091018252602080820180516001600160e01b03167fb03066710000000000000000000000000000000000000000000000000000000017905282518084019093528083527f4e4654206e6f74207375636365737366756c6c79207472616e73666572726564908301526107e8918791906114e3565b600060208251111561131b5760405162461bcd60e51b815260206004820152600b60248201527f696e76616c6964206b657900000000000000000000000000000000000000000060448201526064016103df565b506020015190565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b03167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261138e90849061155b565b505050565b6001600160a01b0382166000908152600260209081526040808320848452825280832033845290915281208054600192906113cf908490611d62565b90915550506001600160a01b03821660009081526003602090815260408083208484529091528120805460019290611408908490611d62565b90915550505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0382166000908152600260209081526040808320848452825280832033845290915281208054600192906114aa908490611d75565b90915550506001600160a01b03821660009081526003602090815260408083208484529091528120805460019290611408908490611d75565b6060600080856001600160a01b0316856040516115009190611d88565b600060405180830381855af49150503d806000811461153b576040519150601f19603f3d011682016040523d82523d6000602084013e611540565b606091505b509150915061155186838387611643565b9695505050505050565b60006115b0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116bc9092919063ffffffff16565b90508051600014806115d15750808060200190518101906115d19190611da4565b61138e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016103df565b606083156116b25782516000036116ab576001600160a01b0385163b6116ab5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103df565b50816107f9565b6107f983836116cb565b60606107f984846000856116f5565b8151156116db5781518083602001fd5b8060405162461bcd60e51b81526004016103df9190611dc6565b60608247101561176d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016103df565b600080866001600160a01b031685876040516117899190611d88565b60006040518083038185875af1925050503d80600081146117c6576040519150601f19603f3d011682016040523d82523d6000602084013e6117cb565b606091505b50915091506117dc87838387611643565b979650505050505050565b6001600160a01b03811681146117fc57600080fd5b50565b60008060006060848603121561181457600080fd5b833561181f816117e7565b9250602084013591506040840135611836816117e7565b809150509250925092565b60006020828403121561185357600080fd5b81356001600160e01b03198116811461186b57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156118a3576118a3611872565b604051601f8501601f19908116603f011681019082821181831017156118cb576118cb611872565b816040528093508581528686860111156118e457600080fd5b858560208301376000602087830101525050509392505050565b6000806000806080858703121561191457600080fd5b843567ffffffffffffffff81111561192b57600080fd5b8501601f8101871361193c57600080fd5b61194b87823560208401611888565b945050602085013561195c816117e7565b9250604085013591506060850135611973816117e7565b939692955090935050565b600082601f83011261198f57600080fd5b61186b83833560208501611888565b600080600080608085870312156119b457600080fd5b84356119bf816117e7565b935060208501356119cf816117e7565b925060408501359150606085013567ffffffffffffffff8111156119f257600080fd5b6119fe8782880161197e565b91505092959194509250565b60008060008060808587031215611a2057600080fd5b8435611a2b816117e7565b9350602085013561195c816117e7565b600080600060608486031215611a5057600080fd5b8335611a5b816117e7565b92506020840135611a6b816117e7565b929592945050506040919091013590565b60008060408385031215611a8f57600080fd5b8235611a9a816117e7565b9150602083013567ffffffffffffffff811115611ab657600080fd5b611ac28582860161197e565b9150509250929050565b60005b83811015611ae7578181015183820152602001611acf565b50506000910152565b60008151808452611b08816020860160208601611acc565b601f01601f19169290920160200192915050565b82151581526040602082015260006107f96040830184611af0565b600060208284031215611b4957600080fd5b813561186b816117e7565b60008083601f840112611b6657600080fd5b50813567ffffffffffffffff811115611b7e57600080fd5b6020830191508360208260051b8501011115610eaa57600080fd5b60008083601f840112611bab57600080fd5b50813567ffffffffffffffff811115611bc357600080fd5b602083019150836020828501011115610eaa57600080fd5b60008060008060008060008060a0898b031215611bf757600080fd5b8835611c02816117e7565b97506020890135611c12816117e7565b9650604089013567ffffffffffffffff80821115611c2f57600080fd5b611c3b8c838d01611b54565b909850965060608b0135915080821115611c5457600080fd5b611c608c838d01611b54565b909650945060808b0135915080821115611c7957600080fd5b50611c868b828c01611b99565b999c989b5096995094979396929594505050565b60008060008060008060a08789031215611cb357600080fd5b8635611cbe816117e7565b95506020870135611cce816117e7565b94506040870135935060608701359250608087013567ffffffffffffffff811115611cf857600080fd5b611d0489828a01611b99565b979a9699509497509295939492505050565b600060208284031215611d2857600080fd5b815161186b816117e7565b600060208284031215611d4557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561061f5761061f611d4c565b8082018082111561061f5761061f611d4c565b60008251611d9a818460208701611acc565b9190910192915050565b600060208284031215611db657600080fd5b8151801515811461186b57600080fd5b60208152600061186b6020830184611af056fea164736f6c6343000813000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016b5760003560e01c80637b49f5bf116100cd578063a4d95b6411610081578063d8867fc811610066578063d8867fc8146102fa578063f23a6e611461030d578063fa3eec241461034657600080fd5b8063a4d95b64146102d4578063bc197c81146102e757600080fd5b80638da5cb5b116100b25780638da5cb5b146102a857806392fede00146102b95780639d6fa618146102c157600080fd5b80637b49f5bf146102745780637deba1cf1461028757600080fd5b8063365a86fc116101245780635f992fdd116101095780635f992fdd146102515780636c817965146102595780637b3711071461026c57600080fd5b8063365a86fc146101ff57806336e254971461023e57600080fd5b80630a76e196116101555780630a76e196146101ad578063150b7a02146101c05780632c1d4ec2146101ec57600080fd5b8062f2a6ab1461017057806301ffc9a714610185575b600080fd5b61018361017e3660046117ff565b610389565b005b610198610193366004611841565b6105a1565b60405190151581526020015b60405180910390f35b6101836101bb3660046118fe565b610625565b6101d36101ce36600461199e565b6107f0565b6040516001600160e01b031990911681526020016101a4565b6101836101fa3660046117ff565b610801565b6102267f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101a4565b61018361024c366004611a0a565b61097a565b610183610a2c565b610183610267366004611a3b565b610aa5565b610183610bc9565b610183610282366004611a0a565b610c38565b61029a610295366004611a7c565b610dfe565b6040516101a4929190611b1c565b6000546001600160a01b0316610226565b610183610eb1565b6101836102cf366004611b37565b610f0b565b6101836102e2366004611b37565b611010565b6101d36102f5366004611bdb565b61108b565b610183610308366004611b37565b6110d6565b6101d361031b366004611c9a565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b6101986103543660046117ff565b6001600160a01b0392831660009081526002602090815260408083209483529381528382209290941681529252902054151590565b6000546001600160a01b031633146103e85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b03831660009081526003602090815260408083208584529091529020541561042a57604051636a32439f60e01b815260040160405180910390fd5b604051631c2d8fb360e31b81526d5045524d49545445445f4e46545360901b60048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e16c7d9890602401602060405180830381865afa1580156104a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c69190611d16565b6040517fb8c8aff80000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152919091169063b8c8aff890602401602060405180830381865afa158015610527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054b9190611d16565b9050610558818585611154565b61058e576040517ff8e7510e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61059b818585308661121b565b50505050565b60006001600160e01b031982167f4e2312e00000000000000000000000000000000000000000000000000000000014806105eb57506001600160e01b03198216630a85bd0160e11b145b8061061f57506001600160e01b031982167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b6000546001600160a01b0316331461067f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103df565b6001600160a01b0383166000908152600360209081526040808320858452909152902054156106c157604051636a32439f60e01b815260040160405180910390fd5b60006106cc856112c7565b604051631c2d8fb360e31b81526d5045524d49545445445f4e46545360901b60048201529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e16c7d9890602401602060405180830381865afa158015610747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076b9190611d16565b6001600160a01b0316631a3dd0a5836040518263ffffffff1660e01b815260040161079891815260200190565b602060405180830381865afa1580156107b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d99190611d16565b90506107e8818686308761121b565b505050505050565b630a85bd0160e11b5b949350505050565b6000546001600160a01b0316331461085b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103df565b6001600160a01b03831660009081526003602090815260408083208584529091529020541561089d57604051636a32439f60e01b815260040160405180910390fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015283906000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156108ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109239190611d33565b90508060000361095f576040517f6d672af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109736001600160a01b0383168486611323565b5050505050565b6001600160a01b038316600090815260026020908152604080832085845282528083203384529091528120548491849190036109c957604051636374b7a760e11b815260040160405180910390fd5b6109d38585611393565b6109e0868686308761121b565b6040513381526001600160a01b038085169186918816907f9abe13faa6aaae81ab2cd561cc29d1d0fafec53dca1f0d553a759be6f8fb0d749060200160405180910390a4505050505050565b6001546001600160a01b03163314610a865760405162461bcd60e51b815260206004820152601c60248201527f4f776e61626c653a206e6f74206f776e65722063616e6469646174650000000060448201526064016103df565b6001805473ffffffffffffffffffffffffffffffffffffffff19169055565b6001600160a01b03821660009081526002602090815260408083208484528252808320338452909152812054839183919003610af457604051636374b7a760e11b815260040160405180910390fd5b6001600160a01b038416600090815260026020908152604080832086845282528083203384529091528120805460019290610b30908490611d62565b90915550506001600160a01b03808516600090815260026020908152604080832087845282528083209389168352929052908120805460019290610b75908490611d75565b9091555050604080513381526001600160a01b0387811660208301528592908716917f74328a3c2ab7afcb5773532d342940a2df414b9866cac572f01ec5e65ea6bd29910160405180910390a35050505050565b6001546001600160a01b03163314610c235760405162461bcd60e51b815260206004820152601c60248201527f4f776e61626c653a206e6f74206f776e65722063616e6469646174650000000060448201526064016103df565b600154610a86906001600160a01b0316611411565b604051631c2d8fb360e31b81527f4c4f414e5f434f4f5244494e41544f520000000000000000000000000000000060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e16c7d9890602401602060405180830381865afa158015610cbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce39190611d16565b6040517f78a7fa670000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0391909116906378a7fa6790602401602060405180830381865afa158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d669190611d33565b03610d9d576040517f5fb3e02f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610da7838361146e565b610db4848484843061121b565b6040513381526001600160a01b038083169184918616907fb5f411fa3c897c9b0b6cd61852278a67e73d885610724a5610a8580d3e94cfdb9060200160405180910390a450505050565b3360009081526004602052604081205460609060ff16610e4a576040517ff4d1650600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b836001600160a01b031683604051610e629190611d88565b6000604051808303816000865af19150503d8060008114610e9f576040519150601f19603f3d011682016040523d82523d6000602084013e610ea4565b606091505b50915091505b9250929050565b6000546001600160a01b03163314610a865760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103df565b6000546001600160a01b03163314610f655760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103df565b6001600160a01b038116610fe15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103df565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461106a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103df565b6001600160a01b03166000908152600460205260409020805460ff19169055565b60405162461bcd60e51b815260206004820152601b60248201527f45524331313535206261746368206e6f7420737570706f72746564000000000060448201526000906064016103df565b6000546001600160a01b031633146111305760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103df565b6001600160a01b03166000908152600460205260409020805460ff19166001179055565b604080513060248201526001600160a01b038416604482015260648082018490528251808303909101815260849091018252602080820180516001600160e01b03167ff370e8c5000000000000000000000000000000000000000000000000000000001790528251808401909352601683527f4f776e65727368697020636865636b206661696c6564000000000000000000009083015260009182916111fc918791906114e3565b9050808060200190518101906112129190611da4565b95945050505050565b604080516001600160a01b03848116602483015283811660448301528616606482015260848082018690528251808303909101815260a49091018252602080820180516001600160e01b03167fb03066710000000000000000000000000000000000000000000000000000000017905282518084019093528083527f4e4654206e6f74207375636365737366756c6c79207472616e73666572726564908301526107e8918791906114e3565b600060208251111561131b5760405162461bcd60e51b815260206004820152600b60248201527f696e76616c6964206b657900000000000000000000000000000000000000000060448201526064016103df565b506020015190565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b03167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261138e90849061155b565b505050565b6001600160a01b0382166000908152600260209081526040808320848452825280832033845290915281208054600192906113cf908490611d62565b90915550506001600160a01b03821660009081526003602090815260408083208484529091528120805460019290611408908490611d62565b90915550505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0382166000908152600260209081526040808320848452825280832033845290915281208054600192906114aa908490611d75565b90915550506001600160a01b03821660009081526003602090815260408083208484529091528120805460019290611408908490611d75565b6060600080856001600160a01b0316856040516115009190611d88565b600060405180830381855af49150503d806000811461153b576040519150601f19603f3d011682016040523d82523d6000602084013e611540565b606091505b509150915061155186838387611643565b9695505050505050565b60006115b0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116bc9092919063ffffffff16565b90508051600014806115d15750808060200190518101906115d19190611da4565b61138e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016103df565b606083156116b25782516000036116ab576001600160a01b0385163b6116ab5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103df565b50816107f9565b6107f983836116cb565b60606107f984846000856116f5565b8151156116db5781518083602001fd5b8060405162461bcd60e51b81526004016103df9190611dc6565b60608247101561176d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016103df565b600080866001600160a01b031685876040516117899190611d88565b60006040518083038185875af1925050503d80600081146117c6576040519150601f19603f3d011682016040523d82523d6000602084013e6117cb565b606091505b50915091506117dc87838387611643565b979650505050505050565b6001600160a01b03811681146117fc57600080fd5b50565b60008060006060848603121561181457600080fd5b833561181f816117e7565b9250602084013591506040840135611836816117e7565b809150509250925092565b60006020828403121561185357600080fd5b81356001600160e01b03198116811461186b57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156118a3576118a3611872565b604051601f8501601f19908116603f011681019082821181831017156118cb576118cb611872565b816040528093508581528686860111156118e457600080fd5b858560208301376000602087830101525050509392505050565b6000806000806080858703121561191457600080fd5b843567ffffffffffffffff81111561192b57600080fd5b8501601f8101871361193c57600080fd5b61194b87823560208401611888565b945050602085013561195c816117e7565b9250604085013591506060850135611973816117e7565b939692955090935050565b600082601f83011261198f57600080fd5b61186b83833560208501611888565b600080600080608085870312156119b457600080fd5b84356119bf816117e7565b935060208501356119cf816117e7565b925060408501359150606085013567ffffffffffffffff8111156119f257600080fd5b6119fe8782880161197e565b91505092959194509250565b60008060008060808587031215611a2057600080fd5b8435611a2b816117e7565b9350602085013561195c816117e7565b600080600060608486031215611a5057600080fd5b8335611a5b816117e7565b92506020840135611a6b816117e7565b929592945050506040919091013590565b60008060408385031215611a8f57600080fd5b8235611a9a816117e7565b9150602083013567ffffffffffffffff811115611ab657600080fd5b611ac28582860161197e565b9150509250929050565b60005b83811015611ae7578181015183820152602001611acf565b50506000910152565b60008151808452611b08816020860160208601611acc565b601f01601f19169290920160200192915050565b82151581526040602082015260006107f96040830184611af0565b600060208284031215611b4957600080fd5b813561186b816117e7565b60008083601f840112611b6657600080fd5b50813567ffffffffffffffff811115611b7e57600080fd5b6020830191508360208260051b8501011115610eaa57600080fd5b60008083601f840112611bab57600080fd5b50813567ffffffffffffffff811115611bc357600080fd5b602083019150836020828501011115610eaa57600080fd5b60008060008060008060008060a0898b031215611bf757600080fd5b8835611c02816117e7565b97506020890135611c12816117e7565b9650604089013567ffffffffffffffff80821115611c2f57600080fd5b611c3b8c838d01611b54565b909850965060608b0135915080821115611c5457600080fd5b611c608c838d01611b54565b909650945060808b0135915080821115611c7957600080fd5b50611c868b828c01611b99565b999c989b5096995094979396929594505050565b60008060008060008060a08789031215611cb357600080fd5b8635611cbe816117e7565b95506020870135611cce816117e7565b94506040870135935060608701359250608087013567ffffffffffffffff811115611cf857600080fd5b611d0489828a01611b99565b979a9699509497509295939492505050565b600060208284031215611d2857600080fd5b815161186b816117e7565b600060208284031215611d4557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561061f5761061f611d4c565b8082018082111561061f5761061f611d4c565b60008251611d9a818460208701611acc565b9190910192915050565b600060208284031215611db657600080fd5b8151801515811461186b57600080fd5b60208152600061186b6020830184611af056fea164736f6c6343000813000a",
  "libraries": {
    "ContractKeys": "0x9F3795222F77599520c2cA67529Dd9810eC6c1F3"
  },
  "devdoc": {
    "author": "NFTfi",
    "kind": "dev",
    "methods": {
      "addPlugin(address)": {
        "params": {
          "_plugin": "address of the plugin"
        }
      },
      "constructor": {
        "params": {
          "_admin": "- Initial admin of this contract."
        }
      },
      "drainERC20Airdrop(address,uint256,address)": {
        "params": {
          "_receiver": "- receiver of the token",
          "_tokenAddress": "- address of the token contract for the token to be sent out"
        }
      },
      "drainNFT(string,address,uint256,address)": {
        "params": {
          "_nftType": "- nft type key which is sourced from nftfi hub",
          "_receiver": "- receiver of the token",
          "_tokenAddress": "- address of the token contract for the token to be sent out",
          "_tokenId": "- id token to be sent out"
        }
      },
      "isInEscrowWithLoan(address,uint256,address)": {
        "params": {
          "_loan": "- Address of the loan contract.",
          "_nftCollateralContract": "- Address of the NFT collateral contract.",
          "_nftCollateralId": "- ID of the NFT collateral."
        },
        "returns": {
          "_0": "bool - True if the NFT is in escrow with the loan, false otherwise."
        }
      },
      "lockCollateral(address,address,uint256,address)": {
        "params": {
          "_borrower": "- Address of the borrower.",
          "_nftCollateralContract": "- Address of the NFT collateral contract.",
          "_nftCollateralId": "- ID of the NFT collateral.",
          "_nftCollateralWrapper": "- Address of the NFT wrapper contract."
        }
      },
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "details": "Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated.",
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if allowed"
        }
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "details": "Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated.",
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if allowed"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removePlugin(address)": {
        "params": {
          "_plugin": "address of the plugin"
        }
      },
      "requestTransferOwnership(address)": {
        "details": "Requests transferring ownership of the contract to a new account (`_newOwnerCandidate`). Can only be called by the current owner."
      },
      "supportsInterface(bytes4)": {
        "details": "Checks whether this contract implements the interface defined by `interfaceId`.",
        "params": {
          "_interfaceId": "Id of the interface"
        },
        "returns": {
          "_0": "true if this contract implements the interface"
        }
      },
      "unlockCollateral(address,address,uint256,address)": {
        "params": {
          "_nftCollateralContract": "- Address of the NFT collateral contract.",
          "_nftCollateralId": "- ID of the NFT collateral.",
          "_nftCollateralWrapper": "- Address of the NFT wrapper contract.",
          "_recipient": "- Address of the recipient."
        }
      },
      "withdrawNFT(address,uint256,address)": {
        "params": {
          "_receiver": "- receiver of the token",
          "_tokenAddress": "- address of the token contract for the token to be sent out",
          "_tokenId": "- id token to be sent out"
        }
      }
    },
    "stateVariables": {
      "_escrowTokens": {
        "details": "keeps track of tokens being held as loan collateral, so we dont allow these to be transferred with the aridrop draining functions nft contract address => nft id => amount (in case of 1155)"
      }
    },
    "title": "Escrow",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addPlugin(address)": {
        "notice": "Admin function for adding a plugin that can make an arbitrary function call WARNING! serious security implications! plugins can move the collateral"
      },
      "constructor": {
        "notice": "Sets the admin of the contract."
      },
      "drainERC20Airdrop(address,uint256,address)": {
        "notice": "used by the owner account to be able to drain sturck ERC20 tokens for revenue share for the locked  collateral NFT-s"
      },
      "drainNFT(string,address,uint256,address)": {
        "notice": "used by the owner account to be able to drain stuck or airdropped NFTs a check prevents draining collateral"
      },
      "isInEscrowWithLoan(address,uint256,address)": {
        "notice": "Checks if a collateral NFT is in escrow with a specific loan."
      },
      "lockCollateral(address,address,uint256,address)": {
        "notice": "Locks collateral NFT for a loan."
      },
      "removePlugin(address)": {
        "notice": "Admin function for removing a plugin that can make an arbitrary function call"
      },
      "unlockCollateral(address,address,uint256,address)": {
        "notice": "Unlocks collateral NFT for a loan."
      },
      "withdrawNFT(address,uint256,address)": {
        "notice": "used by the owner account to be able to drain any tokens used as collateral that is not locked in a loan"
      }
    },
    "notice": "Protocol wide escrow contract for NFT collateral used when a user doen't have a personal escrow deployed*",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25956,
        "contract": "contracts/escrow/Escrow.sol:Escrow",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 25958,
        "contract": "contracts/escrow/Escrow.sol:Escrow",
        "label": "_ownerCandidate",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9632,
        "contract": "contracts/escrow/Escrow.sol:Escrow",
        "label": "_tokensLockedByLoan",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 9639,
        "contract": "contracts/escrow/Escrow.sol:Escrow",
        "label": "_escrowTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 9643,
        "contract": "contracts/escrow/Escrow.sol:Escrow",
        "label": "plugins",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}