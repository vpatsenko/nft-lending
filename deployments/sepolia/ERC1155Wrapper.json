{
  "address": "0xF4d8A0Ea3a317cc88667C4D44c9fb28d749bc978",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approveNFT",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        }
      ],
      "name": "transferNFT",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x471f8d9b8bac9973c40e90eedd2e4a88b86d7fed572506da523f585079193ae0",
  "receipt": {
    "to": null,
    "from": "0x02e037F56728E947e92Af2c05baF7FeF387Ddd06",
    "contractAddress": "0xF4d8A0Ea3a317cc88667C4D44c9fb28d749bc978",
    "transactionIndex": 38,
    "gasUsed": "256618",
    "logsBloom": "0x
    "blockHash": "0xaf99c4d275384cac94af426353ac1ca6d65cf54920bd83ecd2a169cb353fb024",
    "transactionHash": "0x471f8d9b8bac9973c40e90eedd2e4a88b86d7fed572506da523f585079193ae0",
    "logs": [],
    "blockNumber": 6768959,
    "cumulativeGasUsed": "13022715",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bab281e5640fb4f8a58586b3f548739e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approveNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"}],\"name\":\"transferNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Provides logic to transfer ERC1155 tokens\",\"kind\":\"dev\",\"methods\":{\"transferNFT(address,address,address,uint256)\":{\"details\":\"Transfer the nft to the `recipient`\",\"params\":{\"_nftContract\":\"Address of the nft contract\",\"_nftId\":\"Id of the nft\",\"_recipient\":\"Address that will receive the nft\",\"_sender\":\"Address of the current owner of the nft\"},\"returns\":{\"_0\":\"true if successfully transferred, false otherwise\"}}},\"title\":\"ERC1155Wrapper\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/nftTypeRegistry/nftTypes/ERC1155Wrapper.sol\":\"ERC1155Wrapper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":900},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/interfaces/INftWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title INftWrapper\\n * @author NFTfi\\n * @dev Interface for NFT Wrappers.\\n */\\ninterface INftWrapper {\\n    function transferNFT(address from, address to, address nftContract, uint256 tokenId) external returns (bool);\\n\\n    function approveNFT(address to, address nftContract, uint256 tokenId) external returns (bool);\\n\\n    function isOwner(address owner, address nftContract, uint256 tokenId) external view returns (bool);\\n\\n    function balanceOf(address owner, address nftContract, uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5893806ffc6b8dbc12e94e1ee4ee2b0e54a5e46b42e440f2647569b9e0cc003d\",\"license\":\"BUSL-1.1\"},\"contracts/nftTypeRegistry/nftTypes/ERC1155Wrapper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {INftWrapper} from \\\"../../interfaces/INftWrapper.sol\\\";\\n\\n/**\\n * @title ERC1155Wrapper\\n * @dev Provides logic to transfer ERC1155 tokens\\n */\\ncontract ERC1155Wrapper is INftWrapper {\\n    /**\\n     * @dev Transfer the nft to the `recipient`\\n     *\\n     * @param _sender Address of the current owner of the nft\\n     * @param _recipient Address that will receive the nft\\n     * @param _nftContract Address of the nft contract\\n     * @param _nftId Id of the nft\\n     *\\n     * @return true if successfully transferred, false otherwise\\n     */\\n    function transferNFT(\\n        address _sender,\\n        address _recipient,\\n        address _nftContract,\\n        uint256 _nftId\\n    ) external override returns (bool) {\\n        // Warning:\\n        // Since we permit ERC1155s in their entirety, the given nftId may represent a fungible token (amount > 1),\\n        // in which case they are treated as non-fungible by hard coding the amount to 1.\\n        IERC1155(_nftContract).safeTransferFrom(_sender, _recipient, _nftId, 1, \\\"\\\");\\n        return true;\\n    }\\n\\n    function approveNFT(address to, address nftContract, uint256) external override returns (bool) {\\n        IERC1155(nftContract).setApprovalForAll(to, true);\\n        return true;\\n    }\\n\\n    function isOwner(address _owner, address _nftContract, uint256 _tokenId) external view override returns (bool) {\\n        return IERC1155(_nftContract).balanceOf(_owner, _tokenId) > 0;\\n    }\\n\\n    function balanceOf(\\n        address _owner,\\n        address _nftContract,\\n        uint256 _tokenId\\n    ) external view override returns (uint256) {\\n        return IERC1155(_nftContract).balanceOf(_owner, _tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x404ed78d372ec26f144f8ecb0a589d315c64c6d43b669ef3cb77dd3c63658efd\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506103b1806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80637336aaf014610051578063b030667114610079578063e93119d91461008c578063f370e8c5146100ad575b600080fd5b61006461005f366004610304565b6100c0565b60405190151581526020015b60405180910390f35b610064610087366004610340565b610149565b61009f61009a366004610304565b6101f0565b604051908152602001610070565b6100646100bb366004610304565b61026b565b6040517fa22cb4650000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152600160248301526000919084169063a22cb46590604401600060405180830381600087803b15801561012757600080fd5b505af115801561013b573d6000803e3d6000fd5b506001979650505050505050565b6040517ff242432a0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528481166024830152604482018390526001606483015260a06084830152600060a48301819052919084169063f242432a9060c401600060405180830381600087803b1580156101cd57600080fd5b505af11580156101e1573d6000803e3d6000fd5b50600198975050505050505050565b604051627eeac760e11b81526001600160a01b038481166004830152602482018390526000919084169062fdd58e90604401602060405180830381865afa15801561023f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610263919061038b565b949350505050565b604051627eeac760e11b81526001600160a01b03848116600483015260248201839052600091829185169062fdd58e90604401602060405180830381865afa1580156102bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102df919061038b565b11949350505050565b80356001600160a01b03811681146102ff57600080fd5b919050565b60008060006060848603121561031957600080fd5b610322846102e8565b9250610330602085016102e8565b9150604084013590509250925092565b6000806000806080858703121561035657600080fd5b61035f856102e8565b935061036d602086016102e8565b925061037b604086016102e8565b9396929550929360600135925050565b60006020828403121561039d57600080fd5b505191905056fea164736f6c6343000813000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80637336aaf014610051578063b030667114610079578063e93119d91461008c578063f370e8c5146100ad575b600080fd5b61006461005f366004610304565b6100c0565b60405190151581526020015b60405180910390f35b610064610087366004610340565b610149565b61009f61009a366004610304565b6101f0565b604051908152602001610070565b6100646100bb366004610304565b61026b565b6040517fa22cb4650000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152600160248301526000919084169063a22cb46590604401600060405180830381600087803b15801561012757600080fd5b505af115801561013b573d6000803e3d6000fd5b506001979650505050505050565b6040517ff242432a0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528481166024830152604482018390526001606483015260a06084830152600060a48301819052919084169063f242432a9060c401600060405180830381600087803b1580156101cd57600080fd5b505af11580156101e1573d6000803e3d6000fd5b50600198975050505050505050565b604051627eeac760e11b81526001600160a01b038481166004830152602482018390526000919084169062fdd58e90604401602060405180830381865afa15801561023f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610263919061038b565b949350505050565b604051627eeac760e11b81526001600160a01b03848116600483015260248201839052600091829185169062fdd58e90604401602060405180830381865afa1580156102bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102df919061038b565b11949350505050565b80356001600160a01b03811681146102ff57600080fd5b919050565b60008060006060848603121561031957600080fd5b610322846102e8565b9250610330602085016102e8565b9150604084013590509250925092565b6000806000806080858703121561035657600080fd5b61035f856102e8565b935061036d602086016102e8565b925061037b604086016102e8565b9396929550929360600135925050565b60006020828403121561039d57600080fd5b505191905056fea164736f6c6343000813000a",
  "devdoc": {
    "details": "Provides logic to transfer ERC1155 tokens",
    "kind": "dev",
    "methods": {
      "transferNFT(address,address,address,uint256)": {
        "details": "Transfer the nft to the `recipient`",
        "params": {
          "_nftContract": "Address of the nft contract",
          "_nftId": "Id of the nft",
          "_recipient": "Address that will receive the nft",
          "_sender": "Address of the current owner of the nft"
        },
        "returns": {
          "_0": "true if successfully transferred, false otherwise"
        }
      }
    },
    "title": "ERC1155Wrapper",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}