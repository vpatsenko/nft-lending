{
  "address": "0xdF981800FdDE41e19d7F5d47030CBC0F988e17a6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftfiHub",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "_offerTypes",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "_loanContracts",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerNotLoanCreatorContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DisabledLoanContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FunctionInformationArityMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidNonce",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LoanContractAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LoanStatusMustBeNEW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotRegisteredLoanContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ObligationReceiptAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ObligationReceiptZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OfferTypeIsEmpty",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDeployer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PromissoryNoteAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PromissoryNoteDoesntExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PromissoryNoteZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "offerType",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "loanContract",
          "type": "address"
        }
      ],
      "name": "TypeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "loanId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "loanContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ILoanCoordinator.StatusType",
          "name": "newStatus",
          "type": "uint8"
        }
      ],
      "name": "UpdateStatus",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_offerType",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "cancelLoanCommitment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "checkAndInvalidateNonce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "checkNonce",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_offerType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_loanContract",
          "type": "address"
        }
      ],
      "name": "deleteOfferType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_loanContract",
          "type": "address"
        }
      ],
      "name": "disableLoanContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_loanContract",
          "type": "address"
        }
      ],
      "name": "enableLoanContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_offerType",
          "type": "bytes32"
        }
      ],
      "name": "getDefaultLoanContractForOfferType",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_loanId",
          "type": "uint32"
        }
      ],
      "name": "getLoanData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "loanContract",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "smartNftId",
              "type": "uint64"
            },
            {
              "internalType": "enum ILoanCoordinator.StatusType",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct ILoanCoordinator.Loan",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_loanId",
          "type": "uint32"
        }
      ],
      "name": "getLoanDataAndOfferType",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "loanContract",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "smartNftId",
              "type": "uint64"
            },
            {
              "internalType": "enum ILoanCoordinator.StatusType",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct ILoanCoordinator.Loan",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_loanContract",
          "type": "address"
        }
      ],
      "name": "getTypeOfLoanContract",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_offerType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "getWhetherNonceHasBeenUsedForUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hub",
      "outputs": [
        {
          "internalType": "contract INftfiHub",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_promissoryNoteToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_obligationReceiptToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_loanContract",
          "type": "address"
        }
      ],
      "name": "isLoanContractDisabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_loanId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_loanContract",
          "type": "address"
        }
      ],
      "name": "isValidLoanId",
      "outputs": [
        {
          "internalType": "bool",
          "name": "validity",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_loanId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "mintObligationReceipt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_loanId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_lender",
          "type": "address"
        }
      ],
      "name": "mintPromissoryNote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "obligationReceiptToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "promissoryNoteToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerLoan",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_offerType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_loanContract",
          "type": "address"
        }
      ],
      "name": "registerOfferType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_offerTypes",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "_loanContracts",
          "type": "address[]"
        }
      ],
      "name": "registerOfferTypes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rejectTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwnerCandidate",
          "type": "address"
        }
      ],
      "name": "requestTransferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_loanId",
          "type": "uint32"
        }
      ],
      "name": "resetSmartNfts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_loanId",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "_repaid",
          "type": "bool"
        }
      ],
      "name": "resolveLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smartNftIdCounter",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalNumLoans",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8b4fe7b5ff3d12e6cda15cfd672b1d19e0154f0896cec6fa4949d44dbeafd025",
  "receipt": {
    "to": null,
    "from": "0x02e037F56728E947e92Af2c05baF7FeF387Ddd06",
    "contractAddress": "0xdF981800FdDE41e19d7F5d47030CBC0F988e17a6",
    "transactionIndex": 4,
    "gasUsed": "2200932",
    "logsBloom": "0x
    "blockHash": "0xe4ed9c675ffd9c984d63ea349c89348b69d1b0a67e02d1d464fff2a05fb72041",
    "transactionHash": "0x8b4fe7b5ff3d12e6cda15cfd672b1d19e0154f0896cec6fa4949d44dbeafd025",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 16651372,
        "transactionHash": "0x8b4fe7b5ff3d12e6cda15cfd672b1d19e0154f0896cec6fa4949d44dbeafd025",
        "address": "0xdF981800FdDE41e19d7F5d47030CBC0F988e17a6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000002e037f56728e947e92af2c05baf7fef387ddd06"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xe4ed9c675ffd9c984d63ea349c89348b69d1b0a67e02d1d464fff2a05fb72041"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 16651372,
        "transactionHash": "0x8b4fe7b5ff3d12e6cda15cfd672b1d19e0154f0896cec6fa4949d44dbeafd025",
        "address": "0xdF981800FdDE41e19d7F5d47030CBC0F988e17a6",
        "topics": [
          "0x22be69269c1f7d73e73dcb25b710dd88c7aa1cf374c16d945def98df2107c2f8",
          "0x41535345545f4f464645525f4c4f414e00000000000000000000000000000000",
          "0x000000000000000000000000c458e095f8b38cfe0a17a1870b9b65336017709d"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xe4ed9c675ffd9c984d63ea349c89348b69d1b0a67e02d1d464fff2a05fb72041"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 16651372,
        "transactionHash": "0x8b4fe7b5ff3d12e6cda15cfd672b1d19e0154f0896cec6fa4949d44dbeafd025",
        "address": "0xdF981800FdDE41e19d7F5d47030CBC0F988e17a6",
        "topics": [
          "0x22be69269c1f7d73e73dcb25b710dd88c7aa1cf374c16d945def98df2107c2f8",
          "0x434f4c4c454354494f4e5f4f464645525f4c4f414e0000000000000000000000",
          "0x000000000000000000000000ab5f43a1c16126a93a44a49db593ca4ad1721b65"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xe4ed9c675ffd9c984d63ea349c89348b69d1b0a67e02d1d464fff2a05fb72041"
      }
    ],
    "blockNumber": 16651372,
    "cumulativeGasUsed": "2439447",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7e4Dbdb623fBD48b01aF813aC324228575D04834",
    "0x02e037F56728E947e92Af2c05baF7FeF387Ddd06",
    [
      "ASSET_OFFER_LOAN",
      "COLLECTION_OFFER_LOAN"
    ],
    [
      "0xc458E095F8B38CfE0a17A1870B9B65336017709D",
      "0xab5f43a1c16126a93a44A49dB593CA4aD1721b65"
    ]
  ],
  "numDeployments": 2,
  "solcInputHash": "bab281e5640fb4f8a58586b3f548739e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftfiHub\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_offerTypes\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_loanContracts\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotLoanCreatorContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisabledLoanContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FunctionInformationArityMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LoanContractAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LoanStatusMustBeNEW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotRegisteredLoanContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ObligationReceiptAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ObligationReceiptZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OfferTypeIsEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDeployer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PromissoryNoteAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PromissoryNoteDoesntExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PromissoryNoteZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"offerType\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"loanContract\",\"type\":\"address\"}],\"name\":\"TypeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"loanId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"loanContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ILoanCoordinator.StatusType\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"UpdateStatus\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_offerType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"cancelLoanCommitment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"checkAndInvalidateNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"checkNonce\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_offerType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_loanContract\",\"type\":\"address\"}],\"name\":\"deleteOfferType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loanContract\",\"type\":\"address\"}],\"name\":\"disableLoanContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loanContract\",\"type\":\"address\"}],\"name\":\"enableLoanContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_offerType\",\"type\":\"bytes32\"}],\"name\":\"getDefaultLoanContractForOfferType\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_loanId\",\"type\":\"uint32\"}],\"name\":\"getLoanData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"loanContract\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"smartNftId\",\"type\":\"uint64\"},{\"internalType\":\"enum ILoanCoordinator.StatusType\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct ILoanCoordinator.Loan\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_loanId\",\"type\":\"uint32\"}],\"name\":\"getLoanDataAndOfferType\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"loanContract\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"smartNftId\",\"type\":\"uint64\"},{\"internalType\":\"enum ILoanCoordinator.StatusType\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct ILoanCoordinator.Loan\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loanContract\",\"type\":\"address\"}],\"name\":\"getTypeOfLoanContract\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_offerType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"getWhetherNonceHasBeenUsedForUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hub\",\"outputs\":[{\"internalType\":\"contract INftfiHub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_promissoryNoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_obligationReceiptToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loanContract\",\"type\":\"address\"}],\"name\":\"isLoanContractDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_loanId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_loanContract\",\"type\":\"address\"}],\"name\":\"isValidLoanId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"validity\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_loanId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"mintObligationReceipt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_loanId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"}],\"name\":\"mintPromissoryNote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"obligationReceiptToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"promissoryNoteToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerLoan\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_offerType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_loanContract\",\"type\":\"address\"}],\"name\":\"registerOfferType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_offerTypes\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_loanContracts\",\"type\":\"address[]\"}],\"name\":\"registerOfferTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rejectTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwnerCandidate\",\"type\":\"address\"}],\"name\":\"requestTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_loanId\",\"type\":\"uint32\"}],\"name\":\"resetSmartNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_loanId\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"_repaid\",\"type\":\"bool\"}],\"name\":\"resolveLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartNftIdCounter\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNumLoans\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"NFTfi\",\"events\":{\"TypeUpdated(bytes32,address)\":{\"params\":{\"loanContract\":\"- Address of the loan type contract.\",\"offerType\":\"- offer type represented by keccak256('offer type').\"}}},\"kind\":\"dev\",\"methods\":{\"cancelLoanCommitment(bytes32,uint256)\":{\"params\":{\"_nonce\":\"- User nonce\"}},\"checkAndInvalidateNonce(address,uint256)\":{\"params\":{\"_nonce\":\"- The nonce to be checked and invalidated.\",\"_user\":\"- The address of the user.\"}},\"checkNonce(address,uint256)\":{\"params\":{\"_nonce\":\"- The nonce to be checked.\",\"_user\":\"- The address of the user.\"}},\"constructor\":{\"params\":{\"_admin\":\"- Initial admin of this contract.\",\"_loanContracts\":\"- The addresses of each wrapper contract that implements the loan type's behaviour.\",\"_nftfiHub\":\"- Address of the NftfiHub contract\",\"_offerTypes\":\"- offer types represented by keccak256('offer type').\"}},\"deleteOfferType(string,address)\":{\"params\":{\"_loanContract\":\"- The address of the wrapper contract to be deleted.\",\"_offerType\":\"- Loan type represented by 'loan type'.\"}},\"disableLoanContract(address)\":{\"params\":{\"_loanContract\":\"- The address of the loan contract to be disabled.\"}},\"enableLoanContract(address)\":{\"params\":{\"_loanContract\":\"- The address of the loan contract to be enabled.\"}},\"getDefaultLoanContractForOfferType(bytes32)\":{\"params\":{\"_offerType\":\"- The loan type, e.g. bytes32(\\\"ASSET_OFFER_LOAN\\\")\"}},\"getLoanData(uint32)\":{\"details\":\"Returns loan's data for a given id.\",\"params\":{\"_loanId\":\"- Id of the loan\"}},\"getLoanDataAndOfferType(uint32)\":{\"details\":\"Returns loan's data and offerType for a given loan id.\",\"params\":{\"_loanId\":\"- Id of the loan\"}},\"getTypeOfLoanContract(address)\":{\"params\":{\"_loanContract\":\"- The loan contract\"}},\"getWhetherNonceHasBeenUsedForUser(bytes32,address,uint256)\":{\"params\":{\"_nonce\":\"- The nonce referred to here is not the same as an Ethereum account's nonce. We are referring instead to nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower in that situation. This serves two purposes: - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once. - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitment() , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains that nonce.\",\"_user\":\"- The address of the user. This function works for both lenders and borrowers alike.\"},\"returns\":{\"_0\":\"A bool representing whether or not this nonce has been used for this user.\"}},\"initialize(address,address)\":{\"details\":\"Sets `promissoryNoteToken` and `obligationReceiptToken`. It can be executed once by the deployer.\",\"params\":{\"_obligationReceiptToken\":\"- Obligaiton Recipt Token address\",\"_promissoryNoteToken\":\"- Promissory Note Token address\"}},\"isLoanContractDisabled(address)\":{\"params\":{\"_loanContract\":\"- The loan contract address.\"},\"returns\":{\"_0\":\"bool - True if disabled, false otherwise.\"}},\"isValidLoanId(uint32,address)\":{\"details\":\"checks if the given id is valid for the given loan contract address\",\"params\":{\"_loanContract\":\"- address og the loan contract\",\"_loanId\":\"- Id of the loan\"}},\"mintObligationReceipt(uint32,address)\":{\"params\":{\"_borrower\":\"- The address of the borrower.\",\"_loanId\":\"- The ID of the loan.\"}},\"mintPromissoryNote(uint32,address)\":{\"params\":{\"_lender\":\"- The address of the lender.\",\"_loanId\":\"- The ID of the loan.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerLoan()\":{\"details\":\"This is called by the OfferType beginning the new loan. It initialize the new loan data, and returns the new loan id.\"},\"registerOfferType(string,address)\":{\"params\":{\"_loanContract\":\"- The address of the wrapper contract that implements the loan type's behaviour.\",\"_offerType\":\"- Loan type represented by 'loan type'.\"}},\"registerOfferTypes(string[],address[])\":{\"params\":{\"_loanContracts\":\"- The addresses of each wrapper contract that implements the loan type's behaviour.\",\"_offerTypes\":\"- Loan types represented by 'loan type'.\"}},\"requestTransferOwnership(address)\":{\"details\":\"Requests transferring ownership of the contract to a new account (`_newOwnerCandidate`). Can only be called by the current owner.\"},\"resetSmartNfts(uint32)\":{\"params\":{\"_loanId\":\"- The ID of the loan.\"}},\"resolveLoan(uint32,bool)\":{\"details\":\"This is called by the OfferType who created the loan, when a loan is resolved whether by paying back or liquidating the loan. It sets the loan as `RESOLVED` and burns both PromossoryNote and ObligationReceipt SmartNft's.\",\"params\":{\"_loanId\":\"- Id of the loan\"}}},\"stateVariables\":{\"_defaultLoanContractForOfferType\":{\"details\":\"For each loan type, records the address of the contract that implements the type\"},\"_typeOfLoanContract\":{\"details\":\"reverse mapping of offerTypes - for each contract address, records the associated loan type\"}},\"title\":\"LoanCoordinator\",\"version\":1},\"userdoc\":{\"events\":{\"TypeUpdated(bytes32,address)\":{\"notice\":\"This event is fired whenever the admins register a loan type.\"}},\"kind\":\"user\",\"methods\":{\"cancelLoanCommitment(bytes32,uint256)\":{\"notice\":\"This function can be called by either a lender or a borrower to cancel all off-chain orders that they have signed that contain this nonce. If the off-chain orders were created correctly, there should only be one off-chain order that contains this nonce at all. The nonce referred to here is not the same as an Ethereum account's nonce. We are referring instead to nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower in that situation. This serves two purposes. First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once. Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitment(), which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains that nonce.\"},\"checkAndInvalidateNonce(address,uint256)\":{\"notice\":\"Checks and invalidates a nonce for a user.\"},\"checkNonce(address,uint256)\":{\"notice\":\"Checks if a nonce is valid.\"},\"constructor\":{\"notice\":\"Sets the admin of the contract. Initializes `contractTypes` with a batch of loan types. Sets `NftfiHub`.\"},\"deleteOfferType(string,address)\":{\"notice\":\"Deletes the contract address associated with a given Loan Type.\"},\"disableLoanContract(address)\":{\"notice\":\"Disables a loan contract. Makes it impossible for a loan contract to register a new loan, altough renegotiations of their existing loans and repayment/liquidations are still possible\"},\"enableLoanContract(address)\":{\"notice\":\"Enables a loan contract.\"},\"getDefaultLoanContractForOfferType(bytes32)\":{\"notice\":\"This function can be called by anyone to get the latest contract address that implements the given loan type.\"},\"getTypeOfLoanContract(address)\":{\"notice\":\"This function can be called by anyone to get the loan type of the given contract address.\"},\"getWhetherNonceHasBeenUsedForUser(bytes32,address,uint256)\":{\"notice\":\"This function can be used to view whether a particular nonce for a particular user has already been used, either from a successful loan or a cancelled off-chain order.\"},\"isLoanContractDisabled(address)\":{\"notice\":\"Checks if a loan contract is disabled.\"},\"mintObligationReceipt(uint32,address)\":{\"notice\":\"Mints an Obligation Receipt SmartNFT for the borrower. Must be called by corresponding loan type\"},\"mintPromissoryNote(uint32,address)\":{\"notice\":\"Mints a Promissory Note SmartNFT for the lender. Must be called by corresponding loan type\"},\"registerOfferType(string,address)\":{\"notice\":\"Set or update the contract address that implements the given Loan Type. Set address(0) for a loan type for un-register such type.\"},\"registerOfferTypes(string[],address[])\":{\"notice\":\"Batch set or update the contract addresses that implement the given batch Loan Type. Set address(0) for a loan type for un-register such type.\"},\"resetSmartNfts(uint32)\":{\"notice\":\"Resets the SmartNFTs associated with a loan.\"},\"totalNumLoans()\":{\"notice\":\"A continuously increasing counter that simultaneously allows every loan to have a unique ID and provides a running count of how many loans have been started by this contract.\"}},\"notice\":\"This contract is in charge of coordinating the creation, distribution and desctruction of the SmartNfts related to a loan, the Promossory Note and Obligaiton Receipt.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/loans/LoanCoordinator.sol\":\"LoanCoordinator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":900},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/interfaces/ILoanCoordinator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title ILoanCoordinator\\n * @author NFTfi\\n * @dev LoanCoordinator interface.\\n */\\ninterface ILoanCoordinator {\\n    enum StatusType {\\n        NOT_EXISTS,\\n        NEW,\\n        REPAID,\\n        LIQUIDATED\\n    }\\n\\n    /**\\n     * @notice This struct contains data related to a loan\\n     *\\n     * @param smartNftId - The id of both the promissory note and obligation receipt.\\n     * @param status - The status in which the loan currently is.\\n     * @param loanContract - Address of the contract that created the loan.\\n     */\\n    struct Loan {\\n        address loanContract;\\n        uint64 smartNftId;\\n        StatusType status;\\n    }\\n\\n    function registerLoan() external returns (uint32);\\n\\n    function resetSmartNfts(uint32 _loanId) external;\\n\\n    function mintObligationReceipt(uint32 _loanId, address _borrower) external;\\n\\n    function mintPromissoryNote(uint32 _loanId, address _lender) external;\\n\\n    function resolveLoan(uint32 _loanId, bool liquidated) external;\\n\\n    function promissoryNoteToken() external view returns (address);\\n\\n    function obligationReceiptToken() external view returns (address);\\n\\n    function getLoanData(uint32 _loanId) external view returns (Loan memory);\\n\\n    function isValidLoanId(uint32 _loanId, address _loanContract) external view returns (bool);\\n\\n    function getDefaultLoanContractForOfferType(bytes32 _offerType) external view returns (address);\\n\\n    function getTypeOfLoanContract(address _loanContract) external view returns (bytes32);\\n\\n    function checkNonce(address _user, uint256 _nonce) external view;\\n\\n    function checkAndInvalidateNonce(address _user, uint256 _nonce) external;\\n}\\n\",\"keccak256\":\"0xf407ba508babdbe4ef3bdda3278240cf30c7bba1b49e8cf202a80b77c949d6c0\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/INftfiHub.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title INftfiHub\\n * @author NFTfi\\n * @dev NftfiHub interface\\n */\\ninterface INftfiHub {\\n    function setContract(string calldata _contractKey, address _contractAddress) external;\\n\\n    function getContract(bytes32 _contractKey) external view returns (address);\\n}\\n\",\"keccak256\":\"0x65320571d7049eefd4bfd6dcff48b752a4a01c56a23ae7acf0f3b7183b9b08db\",\"license\":\"BUSL-1.1\"},\"contracts/loans/LoanCoordinator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\nimport {SmartNft} from \\\"../smartNft/SmartNft.sol\\\";\\nimport {ILoanCoordinator} from \\\"../interfaces/ILoanCoordinator.sol\\\";\\nimport {INftfiHub} from \\\"../interfaces/INftfiHub.sol\\\";\\nimport {Ownable} from \\\"../utils/Ownable.sol\\\";\\nimport {ContractKeyUtils} from \\\"../utils/ContractKeyUtils.sol\\\";\\n\\n/**\\n * @title  LoanCoordinator\\n * @author NFTfi\\n * @notice This contract is in charge of coordinating the creation, distribution and desctruction of the SmartNfts\\n * related to a loan, the Promossory Note and Obligaiton Receipt.\\n */\\ncontract LoanCoordinator is ILoanCoordinator, Ownable {\\n    /* ******* */\\n    /* STORAGE */\\n    /* ******* */\\n\\n    // solhint-disable-next-line immutable-vars-naming\\n    INftfiHub public immutable hub;\\n\\n    /**\\n     * @dev For each loan type, records the address of the contract that implements the type\\n     */\\n    mapping(bytes32 loanType => address offerAddress) private _defaultLoanContractForOfferType;\\n    /**\\n     * @dev reverse mapping of offerTypes - for each contract address, records the associated loan type\\n     */\\n    mapping(address offerAddress => bytes32 loanType) private _typeOfLoanContract;\\n\\n    mapping(address => bool) private _isLoanContractDisabled;\\n\\n    /**\\n     * @notice A continuously increasing counter that simultaneously allows every loan to have a unique ID and provides\\n     * a running count of how many loans have been started by this contract.\\n     */\\n    uint32 public totalNumLoans = 0;\\n\\n    uint32 public smartNftIdCounter = 0;\\n\\n    // The address that deployed this contract\\n    // solhint-disable-next-line immutable-vars-naming\\n    address private immutable _deployer;\\n    bool private _initialized = false;\\n\\n    mapping(uint32 => Loan) private loans;\\n\\n    address public override promissoryNoteToken;\\n    address public override obligationReceiptToken;\\n\\n    /**\\n     * @notice A mapping that takes both a user's address and a loan nonce that was first used when signing an off-chain\\n     * order and checks whether that nonce has previously either been used for a loan, or has been pre-emptively\\n     * cancelled. The nonce referred to here is not the same as an Ethereum account's nonce. We are referring instead to\\n     * nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi orders.\\n     *\\n     * These nonces can be any uint256 value that the user has not previously used to sign an off-chain order. Each\\n     * nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower\\n     * in that situation. This serves two purposes. First, it prevents replay attacks where an attacker would submit a\\n     * user's off-chain order more than once. Second, it allows a user to cancel an off-chain order by calling\\n     * NFTfi.cancelLoanCommitment(), which marks the nonce as used and prevents any future loan from\\n     * using the user's off-chain order that contains that nonce.\\n     */\\n    mapping(bytes32 offerType => mapping(address user => mapping(uint256 nonce => bool nonceHasBeenUsed)))\\n        internal _nonceHasBeenUsedForUserByOfferType;\\n\\n    /* ****** */\\n    /* EVENTS */\\n    /* ****** */\\n\\n    event UpdateStatus(uint32 indexed loanId, address indexed loanContract, StatusType newStatus);\\n\\n    /**\\n     * @notice This event is fired whenever the admins register a loan type.\\n     *\\n     * @param offerType - offer type represented by keccak256('offer type').\\n     * @param loanContract - Address of the loan type contract.\\n     */\\n    event TypeUpdated(bytes32 indexed offerType, address indexed loanContract);\\n\\n    /* ************* */\\n    /* CUSTOM ERRORS */\\n    /* ************* */\\n\\n    error NotInitialized();\\n    error OnlyDeployer();\\n    error AlreadyInitialized();\\n    error ObligationReceiptZeroAddress();\\n    error PromissoryNoteZeroAddress();\\n    error ObligationReceiptAlreadyExists();\\n    error PromissoryNoteAlreadyExists();\\n    error NotRegisteredLoanContract();\\n    error DisabledLoanContract();\\n    error PromissoryNoteDoesntExist();\\n    error LoanStatusMustBeNEW();\\n    error CallerNotLoanCreatorContract();\\n    error OfferTypeIsEmpty();\\n    error LoanContractAlreadyRegistered();\\n    error FunctionInformationArityMismatch();\\n    error InvalidNonce();\\n\\n    /**\\n     * @dev Function using this modifier can only be executed after this contract is initialized\\n     *\\n     */\\n    modifier onlyInitialized() {\\n        if (!_initialized) revert NotInitialized();\\n        _;\\n    }\\n\\n    /* *********** */\\n    /* CONSTRUCTOR */\\n    /* *********** */\\n\\n    /**\\n     * @notice Sets the admin of the contract.\\n     * Initializes `contractTypes` with a batch of loan types. Sets `NftfiHub`.\\n     *\\n     * @param  _nftfiHub - Address of the NftfiHub contract\\n     * @param _admin - Initial admin of this contract.\\n     * @param _offerTypes - offer types represented by keccak256('offer type').\\n     * @param _loanContracts - The addresses of each wrapper contract that implements the loan type's behaviour.\\n     */\\n    constructor(\\n        address _nftfiHub,\\n        address _admin,\\n        string[] memory _offerTypes,\\n        address[] memory _loanContracts\\n    ) Ownable(_admin) {\\n        hub = INftfiHub(_nftfiHub);\\n        _deployer = msg.sender;\\n        _registerOfferTypes(_offerTypes, _loanContracts);\\n    }\\n\\n    /**\\n     * @dev Sets `promissoryNoteToken` and `obligationReceiptToken`.\\n     * It can be executed once by the deployer.\\n     *\\n     * @param  _promissoryNoteToken - Promissory Note Token address\\n     * @param  _obligationReceiptToken - Obligaiton Recipt Token address\\n     */\\n    function initialize(address _promissoryNoteToken, address _obligationReceiptToken) external {\\n        if (msg.sender != _deployer) revert OnlyDeployer();\\n        if (_initialized) revert AlreadyInitialized();\\n        if (_promissoryNoteToken == address(0)) revert PromissoryNoteZeroAddress();\\n        if (_obligationReceiptToken == address(0)) revert ObligationReceiptZeroAddress();\\n\\n        _initialized = true;\\n        promissoryNoteToken = _promissoryNoteToken;\\n        obligationReceiptToken = _obligationReceiptToken;\\n    }\\n\\n    /**\\n     * @dev This is called by the OfferType beginning the new loan.\\n     * It initialize the new loan data, and returns the new loan id.\\n     */\\n    function registerLoan() external override onlyInitialized returns (uint32) {\\n        address loanContract = msg.sender;\\n\\n        if (_typeOfLoanContract[loanContract] == bytes32(0)) revert NotRegisteredLoanContract();\\n        if (_isLoanContractDisabled[loanContract]) revert DisabledLoanContract();\\n\\n        // (loanIds start at 1)\\n        totalNumLoans += 1;\\n        Loan memory newLoan = Loan({status: StatusType.NEW, loanContract: loanContract, smartNftId: 0});\\n\\n        loans[totalNumLoans] = newLoan;\\n        emit UpdateStatus(totalNumLoans, loanContract, StatusType.NEW);\\n\\n        return totalNumLoans;\\n    }\\n\\n    /**\\n     * @notice Mints a Promissory Note SmartNFT for the lender. Must be called by corresponding loan type\\n     *\\n     * @param _loanId - The ID of the loan.\\n     * @param _lender - The address of the lender.\\n     */\\n    function mintPromissoryNote(uint32 _loanId, address _lender) external onlyInitialized {\\n        address loanContract = msg.sender;\\n\\n        if (_typeOfLoanContract[loanContract] == bytes32(0)) revert NotRegisteredLoanContract();\\n\\n        // create smartNFTid to match the id of the promissory note if promissory note doens't exist\\n        uint64 smartNftId = loans[_loanId].smartNftId;\\n        if (smartNftId == 0) {\\n            smartNftIdCounter += 1;\\n            smartNftId = uint64(uint256(keccak256(abi.encodePacked(address(this), smartNftIdCounter))));\\n        }\\n\\n        if (loans[_loanId].status != StatusType.NEW) revert LoanStatusMustBeNEW();\\n        if (SmartNft(promissoryNoteToken).exists(smartNftId)) revert PromissoryNoteAlreadyExists();\\n\\n        loans[_loanId].smartNftId = smartNftId;\\n        // Issue an ERC721 promissory note to the lender that gives them the\\n        // right to either the principal-plus-interest or the collateral.\\n        SmartNft(promissoryNoteToken).mint(_lender, smartNftId, abi.encode(_loanId));\\n    }\\n\\n    /**\\n     * @notice Mints an Obligation Receipt SmartNFT for the borrower. Must be called by corresponding loan type\\n     *\\n     * @param _loanId - The ID of the loan.\\n     * @param _borrower - The address of the borrower.\\n     */\\n    function mintObligationReceipt(uint32 _loanId, address _borrower) external override onlyInitialized {\\n        address loanContract = msg.sender;\\n\\n        if (_typeOfLoanContract[loanContract] == bytes32(0)) revert NotRegisteredLoanContract();\\n\\n        // create smartNFTid to match the id of the promissory note if promissory note doens't exist\\n        uint64 smartNftId = loans[_loanId].smartNftId;\\n        if (smartNftId == 0) {\\n            smartNftIdCounter += 1;\\n            smartNftId = uint64(uint256(keccak256(abi.encodePacked(address(this), smartNftIdCounter))));\\n        }\\n\\n        if (loans[_loanId].status != StatusType.NEW) revert LoanStatusMustBeNEW();\\n        if (SmartNft(obligationReceiptToken).exists(smartNftId)) revert ObligationReceiptAlreadyExists();\\n\\n        loans[_loanId].smartNftId = smartNftId;\\n        // Issue an ERC721 obligation receipt to the borrower that gives them the\\n        // right to pay back the loan and get the collateral back.\\n        SmartNft(obligationReceiptToken).mint(_borrower, smartNftId, abi.encode(_loanId));\\n    }\\n\\n    /**\\n     * @notice Resets the SmartNFTs associated with a loan.\\n     *\\n     * @param _loanId - The ID of the loan.\\n     */\\n    function resetSmartNfts(uint32 _loanId) external override onlyInitialized {\\n        address loanContract = msg.sender;\\n\\n        if (_typeOfLoanContract[loanContract] == bytes32(0)) revert NotRegisteredLoanContract();\\n\\n        uint64 oldSmartNftId = loans[_loanId].smartNftId;\\n        if (loans[_loanId].status != StatusType.NEW) revert LoanStatusMustBeNEW();\\n\\n        if (SmartNft(promissoryNoteToken).exists(oldSmartNftId)) {\\n            SmartNft(promissoryNoteToken).burn(oldSmartNftId);\\n        }\\n\\n        if (SmartNft(obligationReceiptToken).exists(oldSmartNftId)) {\\n            SmartNft(obligationReceiptToken).burn(oldSmartNftId);\\n        }\\n    }\\n\\n    /**\\n     * @dev This is called by the OfferType who created the loan, when a loan is resolved whether by paying back or\\n     * liquidating the loan.\\n     * It sets the loan as `RESOLVED` and burns both PromossoryNote and ObligationReceipt SmartNft's.\\n     *\\n     * @param _loanId - Id of the loan\\n     */\\n    function resolveLoan(uint32 _loanId, bool _repaid) external override onlyInitialized {\\n        Loan storage loan = loans[_loanId];\\n\\n        if (loan.status != StatusType.NEW) revert LoanStatusMustBeNEW();\\n\\n        if (loan.loanContract != msg.sender) revert CallerNotLoanCreatorContract();\\n\\n        if (_repaid) {\\n            loan.status = StatusType.REPAID;\\n        } else {\\n            loan.status = StatusType.LIQUIDATED;\\n        }\\n\\n        if (SmartNft(promissoryNoteToken).exists(loan.smartNftId)) {\\n            SmartNft(promissoryNoteToken).burn(loan.smartNftId);\\n        }\\n\\n        if (SmartNft(obligationReceiptToken).exists(loan.smartNftId)) {\\n            SmartNft(obligationReceiptToken).burn(loan.smartNftId);\\n        }\\n\\n        emit UpdateStatus(_loanId, msg.sender, loan.status);\\n    }\\n\\n    /**\\n     * @dev Returns loan's data for a given id.\\n     *\\n     * @param _loanId - Id of the loan\\n     */\\n    function getLoanData(uint32 _loanId) external view override returns (Loan memory) {\\n        return loans[_loanId];\\n    }\\n\\n    /**\\n     * @dev Returns loan's data and offerType for a given loan id.\\n     *\\n     * @param _loanId - Id of the loan\\n     */\\n    function getLoanDataAndOfferType(uint32 _loanId) external view returns (Loan memory, bytes32) {\\n        Loan memory loan = loans[_loanId];\\n        return (loan, _typeOfLoanContract[loan.loanContract]);\\n    }\\n\\n    /**\\n     * @dev checks if the given id is valid for the given loan contract address\\n     * @param _loanId - Id of the loan\\n     * @param _loanContract - address og the loan contract\\n     */\\n    function isValidLoanId(uint32 _loanId, address _loanContract) external view override returns (bool validity) {\\n        validity = loans[_loanId].loanContract == _loanContract;\\n    }\\n\\n    /**\\n     * @notice  Set or update the contract address that implements the given Loan Type.\\n     * Set address(0) for a loan type for un-register such type.\\n     *\\n     * @param _offerType - Loan type represented by 'loan type'.\\n     * @param _loanContract - The address of the wrapper contract that implements the loan type's behaviour.\\n     */\\n    function registerOfferType(string memory _offerType, address _loanContract) external onlyOwner {\\n        _registerOfferType(_offerType, _loanContract);\\n    }\\n\\n    /**\\n     * @notice Deletes the contract address associated with a given Loan Type.\\n     *\\n     * @param _offerType - Loan type represented by 'loan type'.\\n     * @param _loanContract - The address of the wrapper contract to be deleted.\\n     */\\n    function deleteOfferType(string memory _offerType, address _loanContract) external onlyOwner {\\n        bytes32 offerTypeKey = ContractKeyUtils.getIdFromStringKey(_offerType);\\n\\n        delete _typeOfLoanContract[_loanContract];\\n        if (_defaultLoanContractForOfferType[offerTypeKey] == _loanContract) {\\n            delete _defaultLoanContractForOfferType[offerTypeKey];\\n        }\\n    }\\n\\n    /**\\n     * @notice Disables a loan contract. Makes it impossible for a loan contract to register a new loan,\\n     * altough renegotiations of their existing loans and repayment/liquidations are still possible\\n     *\\n     * @param _loanContract - The address of the loan contract to be disabled.\\n     */\\n    function disableLoanContract(address _loanContract) external onlyOwner {\\n        _isLoanContractDisabled[_loanContract] = true;\\n    }\\n\\n    /**\\n     * @notice Enables a loan contract.\\n     *\\n     * @param _loanContract - The address of the loan contract to be enabled.\\n     */\\n    function enableLoanContract(address _loanContract) external onlyOwner {\\n        _isLoanContractDisabled[_loanContract] = false;\\n    }\\n\\n    /**\\n     * @notice  Batch set or update the contract addresses that implement the given batch Loan Type.\\n     * Set address(0) for a loan type for un-register such type.\\n     *\\n     * @param _offerTypes - Loan types represented by 'loan type'.\\n     * @param _loanContracts - The addresses of each wrapper contract that implements the loan type's behaviour.\\n     */\\n    function registerOfferTypes(string[] memory _offerTypes, address[] memory _loanContracts) external onlyOwner {\\n        _registerOfferTypes(_offerTypes, _loanContracts);\\n    }\\n\\n    /**\\n     * @notice This function can be called by anyone to get the latest\\n     * contract address that implements the given loan type.\\n     *\\n     * @param  _offerType - The loan type, e.g. bytes32(\\\"ASSET_OFFER_LOAN\\\")\\n     */\\n    function getDefaultLoanContractForOfferType(bytes32 _offerType) public view override returns (address) {\\n        return _defaultLoanContractForOfferType[_offerType];\\n    }\\n\\n    /**\\n     * @notice This function can be called by anyone to get the loan type of the given contract address.\\n     *\\n     * @param  _loanContract - The loan contract\\n     */\\n    function getTypeOfLoanContract(address _loanContract) public view override returns (bytes32) {\\n        return _typeOfLoanContract[_loanContract];\\n    }\\n\\n    /**\\n     * @notice Checks if a loan contract is disabled.\\n     *\\n     * @param _loanContract - The loan contract address.\\n     * @return bool - True if disabled, false otherwise.\\n     */\\n    function isLoanContractDisabled(address _loanContract) external view returns (bool) {\\n        return _isLoanContractDisabled[_loanContract];\\n    }\\n\\n    /**\\n     * @notice  Set or update the contract address that implements the given Loan Type.\\n     * Set address(0) for a loan type for un-register such type.\\n     *\\n     * @param _offerType - Loan type represented by 'loan type').\\n     * @param _loanContract - The address of the wrapper contract that implements the loan type's behaviour.\\n     */\\n    function _registerOfferType(string memory _offerType, address _loanContract) internal {\\n        if (bytes(_offerType).length == 0) revert OfferTypeIsEmpty();\\n        bytes32 offerTypeKey = ContractKeyUtils.getIdFromStringKey(_offerType);\\n\\n        // delete loan contract address of old typeKey registered to this loan contract address\\n\\n        if (_typeOfLoanContract[_loanContract] != bytes32(0)) revert LoanContractAlreadyRegistered();\\n\\n        _defaultLoanContractForOfferType[offerTypeKey] = _loanContract;\\n        _typeOfLoanContract[_loanContract] = offerTypeKey;\\n\\n        emit TypeUpdated(offerTypeKey, _loanContract);\\n    }\\n\\n    /**\\n     * @notice  Batch set or update the contract addresses that implement the given batch Loan Type.\\n     * Set address(0) for a loan type for un-register such type.\\n     *\\n     * @param _offerTypes - Loan types represented by keccak256('loan type').\\n     * @param _loanContracts - The addresses of each wrapper contract that implements the loan type's behaviour.\\n     */\\n    function _registerOfferTypes(string[] memory _offerTypes, address[] memory _loanContracts) internal {\\n        if (_offerTypes.length != _loanContracts.length) revert FunctionInformationArityMismatch();\\n\\n        for (uint256 i; i < _offerTypes.length; ++i) {\\n            _registerOfferType(_offerTypes[i], _loanContracts[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice This function can be called by either a lender or a borrower to cancel all off-chain orders that they\\n     * have signed that contain this nonce. If the off-chain orders were created correctly, there should only be one\\n     * off-chain order that contains this nonce at all.\\n     *\\n     * The nonce referred to here is not the same as an Ethereum account's nonce. We are referring\\n     * instead to nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi\\n     * orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain order.\\n     * Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the\\n     * borrower in that situation. This serves two purposes. First, it prevents replay attacks where an attacker would\\n     * submit a user's off-chain order more than once. Second, it allows a user to cancel an off-chain order by calling\\n     * NFTfi.cancelLoanCommitment(), which marks the nonce as used and prevents any future loan from\\n     * using the user's off-chain order that contains that nonce.\\n     *\\n     * @param  _nonce - User nonce\\n     */\\n    function cancelLoanCommitment(bytes32 _offerType, uint256 _nonce) external {\\n        if (_nonceHasBeenUsedForUserByOfferType[_offerType][msg.sender][_nonce]) {\\n            revert InvalidNonce();\\n        }\\n        _nonceHasBeenUsedForUserByOfferType[_offerType][msg.sender][_nonce] = true;\\n    }\\n\\n    /**\\n     * @notice This function can be used to view whether a particular nonce for a particular user has already been used,\\n     * either from a successful loan or a cancelled off-chain order.\\n     *\\n     * @param _user - The address of the user. This function works for both lenders and borrowers alike.\\n     * @param  _nonce - The nonce referred to here is not the same as an Ethereum account's nonce. We are referring\\n     * instead to nonces that are used by both the lender and the borrower when they are first signing off-chain\\n     * NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain\\n     * order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or\\n     * the borrower in that situation. This serves two purposes:\\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitment()\\n     * , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains\\n     * that nonce.\\n     *\\n     * @return A bool representing whether or not this nonce has been used for this user.\\n     */\\n    function getWhetherNonceHasBeenUsedForUser(\\n        bytes32 _offerType,\\n        address _user,\\n        uint256 _nonce\\n    ) external view returns (bool) {\\n        return _nonceHasBeenUsedForUserByOfferType[_offerType][_user][_nonce];\\n    }\\n\\n    /**\\n     * @notice Checks if a nonce is valid.\\n     *\\n     * @param _user - The address of the user.\\n     * @param _nonce - The nonce to be checked.\\n     */\\n    function checkNonce(address _user, uint256 _nonce) public view override {\\n        bytes32 offerType = _typeOfLoanContract[msg.sender];\\n        if (_nonceHasBeenUsedForUserByOfferType[offerType][_user][_nonce]) {\\n            revert InvalidNonce();\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks and invalidates a nonce for a user.\\n     *\\n     * @param _user - The address of the user.\\n     * @param _nonce - The nonce to be checked and invalidated.\\n     */\\n    function checkAndInvalidateNonce(address _user, uint256 _nonce) external override {\\n        bytes32 offerType = _typeOfLoanContract[msg.sender];\\n        if (_nonceHasBeenUsedForUserByOfferType[offerType][_user][_nonce]) {\\n            revert InvalidNonce();\\n        }\\n        _nonceHasBeenUsedForUserByOfferType[offerType][_user][_nonce] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x036d023e140125bcf26a0b1038f638c0daa2bc3415c40cf34fedaa596e7c4a0e\",\"license\":\"BUSL-1.1\"},\"contracts/smartNft/SmartNft.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport {INftfiHub} from \\\"../interfaces/INftfiHub.sol\\\";\\n\\n/**\\n * @title SmartNft\\n * @author NFTfi\\n * @dev An ERC721 token which represents a very basic implementation of the NFTfi V2 SmartNFT.\\n */\\ncontract SmartNft is ERC721, AccessControl {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    /**\\n     * @dev This struct contains data needed to find the loan linked to a SmartNft.\\n     */\\n    struct Loan {\\n        address loanCoordinator;\\n        uint256 loanId;\\n    }\\n\\n    /* ******* */\\n    /* STORAGE */\\n    /* ******* */\\n\\n    bytes32 public constant LOAN_COORDINATOR_ROLE = keccak256(\\\"LOAN_COORDINATOR_ROLE\\\");\\n    bytes32 public constant BASE_URI_ROLE = keccak256(\\\"BASE_URI_ROLE\\\");\\n\\n    // solhint-disable-next-line immutable-vars-naming\\n    INftfiHub public immutable hub;\\n\\n    // smartNftId => Loan\\n    mapping(uint256 => Loan) public loans;\\n\\n    string public baseURI;\\n\\n    /**\\n     * @dev Grants the contract the default admin role to `_admin`.\\n     * Grants LOAN_COORDINATOR_ROLE to `_loanCoordinator`.\\n     *\\n     * @param _admin - Account to set as the admin of roles\\n     * @param _nftfiHub - Address of the NftfiHub contract\\n     * @param _loanCoordinator - Initial loan coordinator\\n     * @param _name - Name for the SmarNFT\\n     * @param _symbol - Symbol for the SmarNFT\\n     * @param _customBaseURI - Base URI for the SmarNFT\\n     */\\n    constructor(\\n        address _admin,\\n        address _nftfiHub,\\n        address _loanCoordinator,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _customBaseURI\\n    ) ERC721(_name, _symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _setupRole(BASE_URI_ROLE, _admin);\\n        _setupRole(LOAN_COORDINATOR_ROLE, _loanCoordinator);\\n        _setBaseURI(_customBaseURI);\\n        hub = INftfiHub(_nftfiHub);\\n    }\\n\\n    /**\\n     * @dev Grants LOAN_COORDINATOR_ROLE to `_account`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function setLoanCoordinator(address _account) external {\\n        grantRole(LOAN_COORDINATOR_ROLE, _account);\\n    }\\n\\n    /**\\n     * @dev Mints a new token with `_tokenId` and assigne to `_to`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have `LOAN_COORDINATOR_ROLE` role.\\n     *\\n     * @param _to The address reciving the SmartNft\\n     * @param _tokenId The id of the new SmartNft\\n     * @param _data Up to the first 32 bytes contains an integer which represents the loanId linked to the SmartNft\\n     */\\n    function mint(address _to, uint256 _tokenId, bytes calldata _data) external onlyRole(LOAN_COORDINATOR_ROLE) {\\n        // solhint-disable-next-line custom-errors\\n        require(_data.length > 0, \\\"data must contain loanId\\\");\\n        uint256 loanId = abi.decode(_data, (uint256));\\n        loans[_tokenId] = Loan({loanCoordinator: msg.sender, loanId: loanId});\\n        _safeMint(_to, _tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Burns `_tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have `LOAN_COORDINATOR_ROLE` role.\\n     */\\n    function burn(uint256 _tokenId) external onlyRole(LOAN_COORDINATOR_ROLE) {\\n        _burn(_tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets baseURI.\\n     * @param _customBaseURI - Base URI for the SmarNFT\\n     */\\n    function setBaseURI(string memory _customBaseURI) external onlyRole(BASE_URI_ROLE) {\\n        _setBaseURI(_customBaseURI);\\n    }\\n\\n    function exists(uint256 _tokenId) external view returns (bool) {\\n        return _exists(_tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override(ERC721, AccessControl) returns (bool) {\\n        return super.supportsInterface(_interfaceId);\\n    }\\n\\n    /**\\n     * @dev Sets baseURI.\\n     */\\n    function _setBaseURI(string memory _customBaseURI) internal virtual {\\n        baseURI = bytes(_customBaseURI).length > 0\\n            ? string(abi.encodePacked(_customBaseURI, _getChainID().toString(), \\\"/\\\"))\\n            : \\\"\\\";\\n    }\\n\\n    /** @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`.\\n     */\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    /**\\n     * @dev This function gets the current chain ID.\\n     */\\n    function _getChainID() internal view returns (uint256) {\\n        uint256 id;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n}\\n\",\"keccak256\":\"0x7753f4958529eace66b519f0c7691253d7f530173af1c7c55ebaf8edb5f90479\",\"license\":\"BUSL-1.1\"},\"contracts/utils/ContractKeyUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title ContractKeyUtils\\n * @author NFTfi\\n * @dev Common library for contract key utils\\n */\\nlibrary ContractKeyUtils {\\n    /**\\n     * @notice Returns the bytes32 representation of a string\\n     * @param _key the string key\\n     * @return id bytes32 representation\\n     */\\n    function getIdFromStringKey(string memory _key) public pure returns (bytes32 id) {\\n        // solhint-disable-next-line custom-errors\\n        require(bytes(_key).length <= 32, \\\"invalid key\\\");\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := mload(add(_key, 32))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x132d85863f84cf1aa7061ea3ef35a6eafdcc56c6be22efe4370d98939e3cd744\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * Modified version from openzeppelin/contracts/access/Ownable.sol that allows to\\n * initialize the owner using a parameter in the constructor\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    address private _ownerCandidate;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        // solhint-disable-next-line custom-errors\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor(address _initialOwner) {\\n        _setOwner(_initialOwner);\\n    }\\n\\n    /**\\n     * @dev Requests transferring ownership of the contract to a new account (`_newOwnerCandidate`).\\n     * Can only be called by the current owner.\\n     */\\n    function requestTransferOwnership(address _newOwnerCandidate) public virtual onlyOwner {\\n        // solhint-disable-next-line custom-errors\\n        require(_newOwnerCandidate != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _ownerCandidate = _newOwnerCandidate;\\n    }\\n\\n    function acceptTransferOwnership() public virtual {\\n        // solhint-disable-next-line custom-errors\\n        require(_ownerCandidate == _msgSender(), \\\"Ownable: not owner candidate\\\");\\n        _setOwner(_ownerCandidate);\\n        delete _ownerCandidate;\\n    }\\n\\n    function cancelTransferOwnership() public virtual onlyOwner {\\n        delete _ownerCandidate;\\n    }\\n\\n    function rejectTransferOwnership() public virtual {\\n        // solhint-disable-next-line custom-errors\\n        require(_ownerCandidate == _msgSender(), \\\"Ownable: not owner candidate\\\");\\n        delete _ownerCandidate;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Sets the owner.\\n     */\\n    function _setOwner(address _newOwner) internal {\\n        address oldOwner = _owner;\\n        _owner = _newOwner;\\n        emit OwnershipTransferred(oldOwner, _newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x4f1dc29ae64fcd354c09865ae56d8a3612541ebfc9db9b87b7af6f18ca36cf65\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60c0604052600580546001600160481b03191690553480156200002157600080fd5b5060405162002a1538038062002a158339810160408190526200004491620003ce565b82620000508162000078565b506001600160a01b0384166080523360a0526200006e8282620000c8565b50505050620005be565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051825114620000ea57604051621dbe8b60e81b815260040160405180910390fd5b60005b825181101562000154576200014183828151811062000110576200011062000531565b60200260200101518383815181106200012d576200012d62000531565b60200260200101516200015960201b60201c565b6200014c8162000547565b9050620000ed565b505050565b81516000036200017c57604051632b22879560e01b815260040160405180910390fd5b60405163f99a8ffb60e01b8152600090732ffF031e525a20fcF8944aC7Cf3Bdcc3b19a6D779063f99a8ffb90620001b89086906004016200056f565b602060405180830381865af4158015620001d6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001fc9190620005a4565b6001600160a01b038316600090815260036020526040902054909150156200023757604051633844387360e11b815260040160405180910390fd5b600081815260026020908152604080832080546001600160a01b0319166001600160a01b038716908117909155808452600390925280832084905551909183917f22be69269c1f7d73e73dcb25b710dd88c7aa1cf374c16d945def98df2107c2f89190a3505050565b80516001600160a01b0381168114620002b857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620002fe57620002fe620002bd565b604052919050565b60006001600160401b03821115620003225762000322620002bd565b5060051b60200190565b60005b83811015620003495781810151838201526020016200032f565b50506000910152565b600082601f8301126200036457600080fd5b815160206200037d620003778362000306565b620002d3565b82815260059290921b840181019181810190868411156200039d57600080fd5b8286015b84811015620003c357620003b581620002a0565b8352918301918301620003a1565b509695505050505050565b60008060008060808587031215620003e557600080fd5b620003f085620002a0565b9350602062000401818701620002a0565b60408701519094506001600160401b03808211156200041f57600080fd5b818801915088601f8301126200043457600080fd5b815162000445620003778262000306565b81815260059190911b8301840190848101908b8311156200046557600080fd5b8585015b83811015620004fa57805185811115620004835760008081fd5b8601603f81018e13620004965760008081fd5b8781015186811115620004ad57620004ad620002bd565b620004c1601f8201601f19168a01620002d3565b8181528f6040838501011115620004d85760008081fd5b620004ea828b8301604086016200032c565b8552505091860191860162000469565b5060608b015190975094505050808311156200051557600080fd5b5050620005258782880162000352565b91505092959194509250565b634e487b7160e01b600052603260045260246000fd5b6000600182016200056857634e487b7160e01b600052601160045260246000fd5b5060010190565b6020815260008251806020840152620005908160408501602087016200032c565b601f01601f19169190910160400192915050565b600060208284031215620005b757600080fd5b5051919050565b60805160a051612431620005e460003960006109f90152600061023d01526124316000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80637b3711071161010f578063a4d0845d116100a2578063c5d50bdb11610071578063c5d50bdb146104c8578063e6c5a541146104db578063f74ad799146104fb578063fc0309151461050e57600080fd5b8063a4d0845d1461045a578063a591bbb31461046d578063aaf5f564146104ad578063ae734629146104b557600080fd5b80638da5cb5b116100de5780638da5cb5b1461040557806392fede00146104165780639d6fa6181461041e578063a06c62b01461043157600080fd5b80637b371107146103b65780637ccb6d99146103be5780638208e76c146103d157806388e5d918146103e457600080fd5b80634cd93354116101875780635794fefc116101565780635794fefc1461033b5780635f992fdd1461034b57806368bc155d1461035357806378a7fa671461037f57600080fd5b80634cd93354146102a25780634fbe68a0146102b557806352a067e5146102c85780635509a9e91461030e57600080fd5b80631ef3c4fc116101c35780631ef3c4fc14610225578063365a86fc1461023857806338b193a41461027c578063485cc9551461028f57600080fd5b80631000daee146101ea57806318e5a251146101ff5780631b982cf114610212575b600080fd5b6101fd6101f8366004611f18565b610521565b005b6101fd61020d366004611f66565b61058e565b6101fd610220366004611f9c565b6105ff565b6101fd61023336600461205c565b6108f8565b61025f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101fd61028a366004612130565b61095c565b6101fd61029d36600461215a565b6109ee565b6101fd6102b0366004611f18565b610b5a565b60075461025f906001600160a01b031681565b6102fe6102d6366004611f9c565b63ffffffff9091166000908152600660205260409020546001600160a01b0390811691161490565b6040519015158152602001610273565b60055461032690640100000000900463ffffffff1681565b60405163ffffffff9091168152602001610273565b6005546103269063ffffffff1681565b6101fd610c85565b6102fe610361366004612176565b6001600160a01b031660009081526004602052604090205460ff1690565b6103a861038d366004612176565b6001600160a01b031660009081526003602052604090205490565b604051908152602001610273565b6101fd610cf1565b6101fd6103cc366004612198565b610d60565b60085461025f906001600160a01b031681565b6103f76103f2366004612198565b610fe5565b60405161027392919061221e565b6000546001600160a01b031661025f565b6101fd6110a7565b6101fd61042c366004612176565b611101565b61025f61043f366004612239565b6000908152600260205260409020546001600160a01b031690565b6101fd610468366004612263565b6111f9565b6102fe61047b36600461229a565b60009283526009602090815260408085206001600160a01b039490941685529281528284209184525290205460ff1690565b610326611555565b6101fd6104c3366004612130565b611762565b6101fd6104d6366004612176565b6117bb565b6104ee6104e9366004612198565b611836565b60405161027391906122cf565b6101fd610509366004612176565b6118da565b6101fd61051c366004611f9c565b611958565b6000546001600160a01b031633146105805760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61058a8282611bf0565b5050565b6000828152600960209081526040808320338452825280832084845290915290205460ff16156105d157604051633ab3447f60e11b815260040160405180910390fd5b600091825260096020908152604080842033855282528084209284529190529020805460ff19166001179055565b600554600160401b900460ff16610629576040516321c4e35760e21b815260040160405180910390fd5b33600081815260036020526040902054610656576040516383b1311f60e01b815260040160405180910390fd5b63ffffffff8316600090815260066020526040812054600160a01b900467ffffffffffffffff1690819003610720576001600560048282829054906101000a900463ffffffff166106a791906122f9565b82546101009290920a63ffffffff818102199093169190921691909102179055506005546040513060601b6bffffffffffffffffffffffff1916602082015264010000000090910460e01b6001600160e01b03191660348201526038016040516020818303038152906040528051906020012060001c90505b600163ffffffff8516600090815260066020526040902054600160e01b900460ff166003811115610753576107536121b3565b146107715760405163764d926f60e11b815260040160405180910390fd5b600854604051634f558e7960e01b815267ffffffffffffffff831660048201526001600160a01b0390911690634f558e7990602401602060405180830381865afa1580156107c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e7919061231d565b1561081e576040517f0e36e12d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff841660008181526006602090815260409182902080547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff16600160a01b67ffffffffffffffff8716021790556008548251918201939093526001600160a01b03909216916394d008ef9186918591015b6040516020818303038152906040526040518463ffffffff1660e01b81526004016108c093929190612380565b600060405180830381600087803b1580156108da57600080fd5b505af11580156108ee573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146109525760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610577565b61058a8282611d62565b33600090815260036020908152604080832054808452600983528184206001600160a01b038716855283528184208585529092529091205460ff16156109b557604051633ab3447f60e11b815260040160405180910390fd5b60009081526009602090815260408083206001600160a01b0390951683529381528382209282529190915220805460ff19166001179055565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a50576040517f618bbdd500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600554600160401b900460ff1615610a94576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038216610ad4576040517f9b40fba500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038116610b14576040517f5e4f163300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6005805468ff00000000000000001916600160401b179055600780546001600160a01b039384166001600160a01b03199182161790915560088054929093169116179055565b6000546001600160a01b03163314610bb45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610577565b60405163f99a8ffb60e01b8152600090732ffF031e525a20fcF8944aC7Cf3Bdcc3b19a6D779063f99a8ffb90610bee9086906004016123bb565b602060405180830381865af4158015610c0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2f91906123ce565b6001600160a01b0380841660008181526003602090815260408083208390558583526002909152902054929350911603610c8057600081815260026020526040902080546001600160a01b03191690555b505050565b6001546001600160a01b03163314610cdf5760405162461bcd60e51b815260206004820152601c60248201527f4f776e61626c653a206e6f74206f776e65722063616e646964617465000000006044820152606401610577565b600180546001600160a01b0319169055565b6001546001600160a01b03163314610d4b5760405162461bcd60e51b815260206004820152601c60248201527f4f776e61626c653a206e6f74206f776e65722063616e646964617465000000006044820152606401610577565b600154610cdf906001600160a01b0316611df5565b600554600160401b900460ff16610d8a576040516321c4e35760e21b815260040160405180910390fd5b33600081815260036020526040902054610db7576040516383b1311f60e01b815260040160405180910390fd5b63ffffffff8216600090815260066020526040902054600160a01b810467ffffffffffffffff1690600190600160e01b900460ff166003811115610dfd57610dfd6121b3565b14610e1b5760405163764d926f60e11b815260040160405180910390fd5b600754604051634f558e7960e01b815267ffffffffffffffff831660048201526001600160a01b0390911690634f558e7990602401602060405180830381865afa158015610e6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e91919061231d565b15610efe57600754604051630852cd8d60e31b815267ffffffffffffffff831660048201526001600160a01b03909116906342966c6890602401600060405180830381600087803b158015610ee557600080fd5b505af1158015610ef9573d6000803e3d6000fd5b505050505b600854604051634f558e7960e01b815267ffffffffffffffff831660048201526001600160a01b0390911690634f558e7990602401602060405180830381865afa158015610f50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f74919061231d565b15610c8057600854604051630852cd8d60e31b815267ffffffffffffffff831660048201526001600160a01b03909116906342966c6890602401600060405180830381600087803b158015610fc857600080fd5b505af1158015610fdc573d6000803e3d6000fd5b50505050505050565b61100660408051606081018252600080825260208201819052909182015290565b63ffffffff82166000908152600660209081526040808320815160608101835281546001600160a01b0381168252600160a01b810467ffffffffffffffff169482019490945284939092830190600160e01b900460ff16600381111561106e5761106e6121b3565b600381111561107f5761107f6121b3565b90525080516001600160a01b0316600090815260036020526040902054909590945092505050565b6000546001600160a01b03163314610cdf5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610577565b6000546001600160a01b0316331461115b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610577565b6001600160a01b0381166111d75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610577565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600554600160401b900460ff16611223576040516321c4e35760e21b815260040160405180910390fd5b63ffffffff8216600090815260066020526040902060018154600160e01b900460ff166003811115611257576112576121b3565b146112755760405163764d926f60e11b815260040160405180910390fd5b80546001600160a01b031633146112b8576040517f7718cadf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81156112ed57805460ff60e01b19167c0200000000000000000000000000000000000000000000000000000000178155611318565b805460ff60e01b19167c03000000000000000000000000000000000000000000000000000000001781555b6007548154604051634f558e7960e01b8152600160a01b90910467ffffffffffffffff1660048201526001600160a01b0390911690634f558e7990602401602060405180830381865afa158015611373573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611397919061231d565b1561140d576007548154604051630852cd8d60e31b8152600160a01b90910467ffffffffffffffff1660048201526001600160a01b03909116906342966c6890602401600060405180830381600087803b1580156113f457600080fd5b505af1158015611408573d6000803e3d6000fd5b505050505b6008548154604051634f558e7960e01b8152600160a01b90910467ffffffffffffffff1660048201526001600160a01b0390911690634f558e7990602401602060405180830381865afa158015611468573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148c919061231d565b15611502576008548154604051630852cd8d60e31b8152600160a01b90910467ffffffffffffffff1660048201526001600160a01b03909116906342966c6890602401600060405180830381600087803b1580156114e957600080fd5b505af11580156114fd573d6000803e3d6000fd5b505050505b8054604051339163ffffffff8616917f869c0be982e7a0ff20e10bdd64fa0b55c3bbf67e8d11b38863d947a77e7e0cca9161154891600160e01b90910460ff16906123e7565b60405180910390a3505050565b600554600090600160401b900460ff16611582576040516321c4e35760e21b815260040160405180910390fd5b336000818152600360205260409020546115af576040516383b1311f60e01b815260040160405180910390fd5b6001600160a01b03811660009081526004602052604090205460ff1615611602576040517f0b6b43c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600580546001919060009061161e90849063ffffffff166122f9565b92506101000a81548163ffffffff021916908363ffffffff16021790555060006040518060600160405280836001600160a01b03168152602001600067ffffffffffffffff1681526020016001600381111561167c5761167c6121b3565b905260055463ffffffff16600090815260066020908152604091829020835181549285015167ffffffffffffffff16600160a01b026001600160e01b03199093166001600160a01b0390911617919091178082559183015192935083929091829060ff60e01b1916600160e01b8360038111156116fb576116fb6121b3565b0217905550506005546040516001600160a01b038516925063ffffffff909116907f869c0be982e7a0ff20e10bdd64fa0b55c3bbf67e8d11b38863d947a77e7e0cca9061174a906001906123e7565b60405180910390a3505060055463ffffffff16905090565b33600090815260036020908152604080832054808452600983528184206001600160a01b038716855283528184208585529092529091205460ff1615610c8057604051633ab3447f60e11b815260040160405180910390fd5b6000546001600160a01b031633146118155760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610577565b6001600160a01b03166000908152600460205260409020805460ff19169055565b61185760408051606081018252600080825260208201819052909182015290565b63ffffffff8216600090815260066020908152604091829020825160608101845281546001600160a01b0381168252600160a01b810467ffffffffffffffff169382019390935292909190830190600160e01b900460ff1660038111156118c0576118c06121b3565b60038111156118d1576118d16121b3565b90525092915050565b6000546001600160a01b031633146119345760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610577565b6001600160a01b03166000908152600460205260409020805460ff19166001179055565b600554600160401b900460ff16611982576040516321c4e35760e21b815260040160405180910390fd5b336000818152600360205260409020546119af576040516383b1311f60e01b815260040160405180910390fd5b63ffffffff8316600090815260066020526040812054600160a01b900467ffffffffffffffff1690819003611a79576001600560048282829054906101000a900463ffffffff16611a0091906122f9565b82546101009290920a63ffffffff818102199093169190921691909102179055506005546040513060601b6bffffffffffffffffffffffff1916602082015264010000000090910460e01b6001600160e01b03191660348201526038016040516020818303038152906040528051906020012060001c90505b600163ffffffff8516600090815260066020526040902054600160e01b900460ff166003811115611aac57611aac6121b3565b14611aca5760405163764d926f60e11b815260040160405180910390fd5b600754604051634f558e7960e01b815267ffffffffffffffff831660048201526001600160a01b0390911690634f558e7990602401602060405180830381865afa158015611b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b40919061231d565b15611b77576040517f8d4ebf0500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff841660008181526006602090815260409182902080547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff16600160a01b67ffffffffffffffff8716021790556007548251918201939093526001600160a01b03909216916394d008ef918691859101610893565b8151600003611c2b576040517f2b22879500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405163f99a8ffb60e01b8152600090732ffF031e525a20fcF8944aC7Cf3Bdcc3b19a6D779063f99a8ffb90611c659086906004016123bb565b602060405180830381865af4158015611c82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca691906123ce565b6001600160a01b03831660009081526003602052604090205490915015611cf9576040517f708870e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081815260026020908152604080832080546001600160a01b0319166001600160a01b038716908117909155808452600390925280832084905551909183917f22be69269c1f7d73e73dcb25b710dd88c7aa1cf374c16d945def98df2107c2f89190a3505050565b8051825114611d9d576040517f1dbe8b0000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8251811015610c8057611de5838281518110611dbe57611dbe6123f5565b6020026020010151838381518110611dd857611dd86123f5565b6020026020010151611bf0565b611dee8161240b565b9050611da0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611e8457611e84611e45565b604052919050565b600082601f830112611e9d57600080fd5b813567ffffffffffffffff811115611eb757611eb7611e45565b611eca601f8201601f1916602001611e5b565b818152846020838601011115611edf57600080fd5b816020850160208301376000918101602001919091529392505050565b80356001600160a01b0381168114611f1357600080fd5b919050565b60008060408385031215611f2b57600080fd5b823567ffffffffffffffff811115611f4257600080fd5b611f4e85828601611e8c565b925050611f5d60208401611efc565b90509250929050565b60008060408385031215611f7957600080fd5b50508035926020909101359150565b803563ffffffff81168114611f1357600080fd5b60008060408385031215611faf57600080fd5b611fb883611f88565b9150611f5d60208401611efc565b600067ffffffffffffffff821115611fe057611fe0611e45565b5060051b60200190565b600082601f830112611ffb57600080fd5b8135602061201061200b83611fc6565b611e5b565b82815260059290921b8401810191818101908684111561202f57600080fd5b8286015b848110156120515761204481611efc565b8352918301918301612033565b509695505050505050565b6000806040838503121561206f57600080fd5b823567ffffffffffffffff8082111561208757600080fd5b818501915085601f83011261209b57600080fd5b813560206120ab61200b83611fc6565b82815260059290921b840181019181810190898411156120ca57600080fd5b8286015b84811015612102578035868111156120e65760008081fd5b6120f48c86838b0101611e8c565b8452509183019183016120ce565b509650508601359250508082111561211957600080fd5b5061212685828601611fea565b9150509250929050565b6000806040838503121561214357600080fd5b61214c83611efc565b946020939093013593505050565b6000806040838503121561216d57600080fd5b611fb883611efc565b60006020828403121561218857600080fd5b61219182611efc565b9392505050565b6000602082840312156121aa57600080fd5b61219182611f88565b634e487b7160e01b600052602160045260246000fd5b600481106121e757634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b03815116825267ffffffffffffffff60208201511660208301526040810151610c8060408401826121c9565b6080810161222c82856121eb565b8260608301529392505050565b60006020828403121561224b57600080fd5b5035919050565b801515811461226057600080fd5b50565b6000806040838503121561227657600080fd5b61227f83611f88565b9150602083013561228f81612252565b809150509250929050565b6000806000606084860312156122af57600080fd5b833592506122bf60208501611efc565b9150604084013590509250925092565b606081016122dd82846121eb565b92915050565b634e487b7160e01b600052601160045260246000fd5b63ffffffff818116838216019080821115612316576123166122e3565b5092915050565b60006020828403121561232f57600080fd5b815161219181612252565b6000815180845260005b8181101561236057602081850181015186830182015201612344565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b038416815267ffffffffffffffff831660208201526060604082015260006123b2606083018461233a565b95945050505050565b602081526000612191602083018461233a565b6000602082840312156123e057600080fd5b5051919050565b602081016122dd82846121c9565b634e487b7160e01b600052603260045260246000fd5b60006001820161241d5761241d6122e3565b506001019056fea164736f6c6343000813000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c80637b3711071161010f578063a4d0845d116100a2578063c5d50bdb11610071578063c5d50bdb146104c8578063e6c5a541146104db578063f74ad799146104fb578063fc0309151461050e57600080fd5b8063a4d0845d1461045a578063a591bbb31461046d578063aaf5f564146104ad578063ae734629146104b557600080fd5b80638da5cb5b116100de5780638da5cb5b1461040557806392fede00146104165780639d6fa6181461041e578063a06c62b01461043157600080fd5b80637b371107146103b65780637ccb6d99146103be5780638208e76c146103d157806388e5d918146103e457600080fd5b80634cd93354116101875780635794fefc116101565780635794fefc1461033b5780635f992fdd1461034b57806368bc155d1461035357806378a7fa671461037f57600080fd5b80634cd93354146102a25780634fbe68a0146102b557806352a067e5146102c85780635509a9e91461030e57600080fd5b80631ef3c4fc116101c35780631ef3c4fc14610225578063365a86fc1461023857806338b193a41461027c578063485cc9551461028f57600080fd5b80631000daee146101ea57806318e5a251146101ff5780631b982cf114610212575b600080fd5b6101fd6101f8366004611f18565b610521565b005b6101fd61020d366004611f66565b61058e565b6101fd610220366004611f9c565b6105ff565b6101fd61023336600461205c565b6108f8565b61025f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101fd61028a366004612130565b61095c565b6101fd61029d36600461215a565b6109ee565b6101fd6102b0366004611f18565b610b5a565b60075461025f906001600160a01b031681565b6102fe6102d6366004611f9c565b63ffffffff9091166000908152600660205260409020546001600160a01b0390811691161490565b6040519015158152602001610273565b60055461032690640100000000900463ffffffff1681565b60405163ffffffff9091168152602001610273565b6005546103269063ffffffff1681565b6101fd610c85565b6102fe610361366004612176565b6001600160a01b031660009081526004602052604090205460ff1690565b6103a861038d366004612176565b6001600160a01b031660009081526003602052604090205490565b604051908152602001610273565b6101fd610cf1565b6101fd6103cc366004612198565b610d60565b60085461025f906001600160a01b031681565b6103f76103f2366004612198565b610fe5565b60405161027392919061221e565b6000546001600160a01b031661025f565b6101fd6110a7565b6101fd61042c366004612176565b611101565b61025f61043f366004612239565b6000908152600260205260409020546001600160a01b031690565b6101fd610468366004612263565b6111f9565b6102fe61047b36600461229a565b60009283526009602090815260408085206001600160a01b039490941685529281528284209184525290205460ff1690565b610326611555565b6101fd6104c3366004612130565b611762565b6101fd6104d6366004612176565b6117bb565b6104ee6104e9366004612198565b611836565b60405161027391906122cf565b6101fd610509366004612176565b6118da565b6101fd61051c366004611f9c565b611958565b6000546001600160a01b031633146105805760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61058a8282611bf0565b5050565b6000828152600960209081526040808320338452825280832084845290915290205460ff16156105d157604051633ab3447f60e11b815260040160405180910390fd5b600091825260096020908152604080842033855282528084209284529190529020805460ff19166001179055565b600554600160401b900460ff16610629576040516321c4e35760e21b815260040160405180910390fd5b33600081815260036020526040902054610656576040516383b1311f60e01b815260040160405180910390fd5b63ffffffff8316600090815260066020526040812054600160a01b900467ffffffffffffffff1690819003610720576001600560048282829054906101000a900463ffffffff166106a791906122f9565b82546101009290920a63ffffffff818102199093169190921691909102179055506005546040513060601b6bffffffffffffffffffffffff1916602082015264010000000090910460e01b6001600160e01b03191660348201526038016040516020818303038152906040528051906020012060001c90505b600163ffffffff8516600090815260066020526040902054600160e01b900460ff166003811115610753576107536121b3565b146107715760405163764d926f60e11b815260040160405180910390fd5b600854604051634f558e7960e01b815267ffffffffffffffff831660048201526001600160a01b0390911690634f558e7990602401602060405180830381865afa1580156107c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e7919061231d565b1561081e576040517f0e36e12d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff841660008181526006602090815260409182902080547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff16600160a01b67ffffffffffffffff8716021790556008548251918201939093526001600160a01b03909216916394d008ef9186918591015b6040516020818303038152906040526040518463ffffffff1660e01b81526004016108c093929190612380565b600060405180830381600087803b1580156108da57600080fd5b505af11580156108ee573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146109525760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610577565b61058a8282611d62565b33600090815260036020908152604080832054808452600983528184206001600160a01b038716855283528184208585529092529091205460ff16156109b557604051633ab3447f60e11b815260040160405180910390fd5b60009081526009602090815260408083206001600160a01b0390951683529381528382209282529190915220805460ff19166001179055565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a50576040517f618bbdd500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600554600160401b900460ff1615610a94576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038216610ad4576040517f9b40fba500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038116610b14576040517f5e4f163300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6005805468ff00000000000000001916600160401b179055600780546001600160a01b039384166001600160a01b03199182161790915560088054929093169116179055565b6000546001600160a01b03163314610bb45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610577565b60405163f99a8ffb60e01b815260009073__$b0ae3f603fa3e13f3b829da0b88d39db57$$b0ae3f603fa3e13f3b829da0b88d39db57$__9063f99a8ffb90611c659086906004016123bb565b602060405180830381865af4158015611c82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca691906123ce565b6001600160a01b03831660009081526003602052604090205490915015611cf9576040517f708870e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081815260026020908152604080832080546001600160a01b0319166001600160a01b038716908117909155808452600390925280832084905551909183917f22be69269c1f7d73e73dcb25b710dd88c7aa1cf374c16d945def98df2107c2f89190a3505050565b8051825114611d9d576040517f1dbe8b0000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8251811015610c8057611de5838281518110611dbe57611dbe6123f5565b6020026020010151838381518110611dd857611dd86123f5565b6020026020010151611bf0565b611dee8161240b565b9050611da0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611e8457611e84611e45565b604052919050565b600082601f830112611e9d57600080fd5b813567ffffffffffffffff811115611eb757611eb7611e45565b611eca601f8201601f1916602001611e5b565b818152846020838601011115611edf57600080fd5b816020850160208301376000918101602001919091529392505050565b80356001600160a01b0381168114611f1357600080fd5b919050565b60008060408385031215611f2b57600080fd5b823567ffffffffffffffff811115611f4257600080fd5b611f4e85828601611e8c565b925050611f5d60208401611efc565b90509250929050565b60008060408385031215611f7957600080fd5b50508035926020909101359150565b803563ffffffff81168114611f1357600080fd5b60008060408385031215611faf57600080fd5b611fb883611f88565b9150611f5d60208401611efc565b600067ffffffffffffffff821115611fe057611fe0611e45565b5060051b60200190565b600082601f830112611ffb57600080fd5b8135602061201061200b83611fc6565b611e5b565b82815260059290921b8401810191818101908684111561202f57600080fd5b8286015b848110156120515761204481611efc565b8352918301918301612033565b509695505050505050565b6000806040838503121561206f57600080fd5b823567ffffffffffffffff8082111561208757600080fd5b818501915085601f83011261209b57600080fd5b813560206120ab61200b83611fc6565b82815260059290921b840181019181810190898411156120ca57600080fd5b8286015b84811015612102578035868111156120e65760008081fd5b6120f48c86838b0101611e8c565b8452509183019183016120ce565b509650508601359250508082111561211957600080fd5b5061212685828601611fea565b9150509250929050565b6000806040838503121561214357600080fd5b61214c83611efc565b946020939093013593505050565b6000806040838503121561216d57600080fd5b611fb883611efc565b60006020828403121561218857600080fd5b61219182611efc565b9392505050565b6000602082840312156121aa57600080fd5b61219182611f88565b634e487b7160e01b600052602160045260246000fd5b600481106121e757634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b03815116825267ffffffffffffffff60208201511660208301526040810151610c8060408401826121c9565b6080810161222c82856121eb565b8260608301529392505050565b60006020828403121561224b57600080fd5b5035919050565b801515811461226057600080fd5b50565b6000806040838503121561227657600080fd5b61227f83611f88565b9150602083013561228f81612252565b809150509250929050565b6000806000606084860312156122af57600080fd5b833592506122bf60208501611efc565b9150604084013590509250925092565b606081016122dd82846121eb565b92915050565b634e487b7160e01b600052601160045260246000fd5b63ffffffff818116838216019080821115612316576123166122e3565b5092915050565b60006020828403121561232f57600080fd5b815161219181612252565b6000815180845260005b8181101561236057602081850181015186830182015201612344565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b038416815267ffffffffffffffff831660208201526060604082015260006123b2606083018461233a565b95945050505050565b602081526000612191602083018461233a565b6000602082840312156123e057600080fd5b5051919050565b602081016122dd82846121c9565b634e487b7160e01b600052603260045260246000fd5b60006001820161241d5761241d6122e3565b506001019056fea164736f6c6343000813000a",
  "libraries": {
    "ContractKeyUtils": "0x2ffF031e525a20fcF8944aC7Cf3Bdcc3b19a6D77"
  },
  "devdoc": {
    "author": "NFTfi",
    "events": {
      "TypeUpdated(bytes32,address)": {
        "params": {
          "loanContract": "- Address of the loan type contract.",
          "offerType": "- offer type represented by keccak256('offer type')."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "cancelLoanCommitment(bytes32,uint256)": {
        "params": {
          "_nonce": "- User nonce"
        }
      },
      "checkAndInvalidateNonce(address,uint256)": {
        "params": {
          "_nonce": "- The nonce to be checked and invalidated.",
          "_user": "- The address of the user."
        }
      },
      "checkNonce(address,uint256)": {
        "params": {
          "_nonce": "- The nonce to be checked.",
          "_user": "- The address of the user."
        }
      },
      "constructor": {
        "params": {
          "_admin": "- Initial admin of this contract.",
          "_loanContracts": "- The addresses of each wrapper contract that implements the loan type's behaviour.",
          "_nftfiHub": "- Address of the NftfiHub contract",
          "_offerTypes": "- offer types represented by keccak256('offer type')."
        }
      },
      "deleteOfferType(string,address)": {
        "params": {
          "_loanContract": "- The address of the wrapper contract to be deleted.",
          "_offerType": "- Loan type represented by 'loan type'."
        }
      },
      "disableLoanContract(address)": {
        "params": {
          "_loanContract": "- The address of the loan contract to be disabled."
        }
      },
      "enableLoanContract(address)": {
        "params": {
          "_loanContract": "- The address of the loan contract to be enabled."
        }
      },
      "getDefaultLoanContractForOfferType(bytes32)": {
        "params": {
          "_offerType": "- The loan type, e.g. bytes32(\"ASSET_OFFER_LOAN\")"
        }
      },
      "getLoanData(uint32)": {
        "details": "Returns loan's data for a given id.",
        "params": {
          "_loanId": "- Id of the loan"
        }
      },
      "getLoanDataAndOfferType(uint32)": {
        "details": "Returns loan's data and offerType for a given loan id.",
        "params": {
          "_loanId": "- Id of the loan"
        }
      },
      "getTypeOfLoanContract(address)": {
        "params": {
          "_loanContract": "- The loan contract"
        }
      },
      "getWhetherNonceHasBeenUsedForUser(bytes32,address,uint256)": {
        "params": {
          "_nonce": "- The nonce referred to here is not the same as an Ethereum account's nonce. We are referring instead to nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower in that situation. This serves two purposes: - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once. - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitment() , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains that nonce.",
          "_user": "- The address of the user. This function works for both lenders and borrowers alike."
        },
        "returns": {
          "_0": "A bool representing whether or not this nonce has been used for this user."
        }
      },
      "initialize(address,address)": {
        "details": "Sets `promissoryNoteToken` and `obligationReceiptToken`. It can be executed once by the deployer.",
        "params": {
          "_obligationReceiptToken": "- Obligaiton Recipt Token address",
          "_promissoryNoteToken": "- Promissory Note Token address"
        }
      },
      "isLoanContractDisabled(address)": {
        "params": {
          "_loanContract": "- The loan contract address."
        },
        "returns": {
          "_0": "bool - True if disabled, false otherwise."
        }
      },
      "isValidLoanId(uint32,address)": {
        "details": "checks if the given id is valid for the given loan contract address",
        "params": {
          "_loanContract": "- address og the loan contract",
          "_loanId": "- Id of the loan"
        }
      },
      "mintObligationReceipt(uint32,address)": {
        "params": {
          "_borrower": "- The address of the borrower.",
          "_loanId": "- The ID of the loan."
        }
      },
      "mintPromissoryNote(uint32,address)": {
        "params": {
          "_lender": "- The address of the lender.",
          "_loanId": "- The ID of the loan."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerLoan()": {
        "details": "This is called by the OfferType beginning the new loan. It initialize the new loan data, and returns the new loan id."
      },
      "registerOfferType(string,address)": {
        "params": {
          "_loanContract": "- The address of the wrapper contract that implements the loan type's behaviour.",
          "_offerType": "- Loan type represented by 'loan type'."
        }
      },
      "registerOfferTypes(string[],address[])": {
        "params": {
          "_loanContracts": "- The addresses of each wrapper contract that implements the loan type's behaviour.",
          "_offerTypes": "- Loan types represented by 'loan type'."
        }
      },
      "requestTransferOwnership(address)": {
        "details": "Requests transferring ownership of the contract to a new account (`_newOwnerCandidate`). Can only be called by the current owner."
      },
      "resetSmartNfts(uint32)": {
        "params": {
          "_loanId": "- The ID of the loan."
        }
      },
      "resolveLoan(uint32,bool)": {
        "details": "This is called by the OfferType who created the loan, when a loan is resolved whether by paying back or liquidating the loan. It sets the loan as `RESOLVED` and burns both PromossoryNote and ObligationReceipt SmartNft's.",
        "params": {
          "_loanId": "- Id of the loan"
        }
      }
    },
    "stateVariables": {
      "_defaultLoanContractForOfferType": {
        "details": "For each loan type, records the address of the contract that implements the type"
      },
      "_typeOfLoanContract": {
        "details": "reverse mapping of offerTypes - for each contract address, records the associated loan type"
      }
    },
    "title": "LoanCoordinator",
    "version": 1
  },
  "userdoc": {
    "events": {
      "TypeUpdated(bytes32,address)": {
        "notice": "This event is fired whenever the admins register a loan type."
      }
    },
    "kind": "user",
    "methods": {
      "cancelLoanCommitment(bytes32,uint256)": {
        "notice": "This function can be called by either a lender or a borrower to cancel all off-chain orders that they have signed that contain this nonce. If the off-chain orders were created correctly, there should only be one off-chain order that contains this nonce at all. The nonce referred to here is not the same as an Ethereum account's nonce. We are referring instead to nonces that are used by both the lender and the borrower when they are first signing off-chain NFTfi orders. These nonces can be any uint256 value that the user has not previously used to sign an off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the lender or the borrower in that situation. This serves two purposes. First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once. Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitment(), which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains that nonce."
      },
      "checkAndInvalidateNonce(address,uint256)": {
        "notice": "Checks and invalidates a nonce for a user."
      },
      "checkNonce(address,uint256)": {
        "notice": "Checks if a nonce is valid."
      },
      "constructor": {
        "notice": "Sets the admin of the contract. Initializes `contractTypes` with a batch of loan types. Sets `NftfiHub`."
      },
      "deleteOfferType(string,address)": {
        "notice": "Deletes the contract address associated with a given Loan Type."
      },
      "disableLoanContract(address)": {
        "notice": "Disables a loan contract. Makes it impossible for a loan contract to register a new loan, altough renegotiations of their existing loans and repayment/liquidations are still possible"
      },
      "enableLoanContract(address)": {
        "notice": "Enables a loan contract."
      },
      "getDefaultLoanContractForOfferType(bytes32)": {
        "notice": "This function can be called by anyone to get the latest contract address that implements the given loan type."
      },
      "getTypeOfLoanContract(address)": {
        "notice": "This function can be called by anyone to get the loan type of the given contract address."
      },
      "getWhetherNonceHasBeenUsedForUser(bytes32,address,uint256)": {
        "notice": "This function can be used to view whether a particular nonce for a particular user has already been used, either from a successful loan or a cancelled off-chain order."
      },
      "isLoanContractDisabled(address)": {
        "notice": "Checks if a loan contract is disabled."
      },
      "mintObligationReceipt(uint32,address)": {
        "notice": "Mints an Obligation Receipt SmartNFT for the borrower. Must be called by corresponding loan type"
      },
      "mintPromissoryNote(uint32,address)": {
        "notice": "Mints a Promissory Note SmartNFT for the lender. Must be called by corresponding loan type"
      },
      "registerOfferType(string,address)": {
        "notice": "Set or update the contract address that implements the given Loan Type. Set address(0) for a loan type for un-register such type."
      },
      "registerOfferTypes(string[],address[])": {
        "notice": "Batch set or update the contract addresses that implement the given batch Loan Type. Set address(0) for a loan type for un-register such type."
      },
      "resetSmartNfts(uint32)": {
        "notice": "Resets the SmartNFTs associated with a loan."
      },
      "totalNumLoans()": {
        "notice": "A continuously increasing counter that simultaneously allows every loan to have a unique ID and provides a running count of how many loans have been started by this contract."
      }
    },
    "notice": "This contract is in charge of coordinating the creation, distribution and desctruction of the SmartNfts related to a loan, the Promossory Note and Obligaiton Receipt.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25956,
        "contract": "contracts/loans/LoanCoordinator.sol:LoanCoordinator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 25958,
        "contract": "contracts/loans/LoanCoordinator.sol:LoanCoordinator",
        "label": "_ownerCandidate",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12504,
        "contract": "contracts/loans/LoanCoordinator.sol:LoanCoordinator",
        "label": "_defaultLoanContractForOfferType",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 12509,
        "contract": "contracts/loans/LoanCoordinator.sol:LoanCoordinator",
        "label": "_typeOfLoanContract",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 12513,
        "contract": "contracts/loans/LoanCoordinator.sol:LoanCoordinator",
        "label": "_isLoanContractDisabled",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12517,
        "contract": "contracts/loans/LoanCoordinator.sol:LoanCoordinator",
        "label": "totalNumLoans",
        "offset": 0,
        "slot": "5",
        "type": "t_uint32"
      },
      {
        "astId": 12520,
        "contract": "contracts/loans/LoanCoordinator.sol:LoanCoordinator",
        "label": "smartNftIdCounter",
        "offset": 4,
        "slot": "5",
        "type": "t_uint32"
      },
      {
        "astId": 12525,
        "contract": "contracts/loans/LoanCoordinator.sol:LoanCoordinator",
        "label": "_initialized",
        "offset": 8,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 12530,
        "contract": "contracts/loans/LoanCoordinator.sol:LoanCoordinator",
        "label": "loans",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint32,t_struct(Loan)12099_storage)"
      },
      {
        "astId": 12533,
        "contract": "contracts/loans/LoanCoordinator.sol:LoanCoordinator",
        "label": "promissoryNoteToken",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 12536,
        "contract": "contracts/loans/LoanCoordinator.sol:LoanCoordinator",
        "label": "obligationReceiptToken",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 12545,
        "contract": "contracts/loans/LoanCoordinator.sol:LoanCoordinator",
        "label": "_nonceHasBeenUsedForUserByOfferType",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_bool)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(StatusType)12091": {
        "encoding": "inplace",
        "label": "enum ILoanCoordinator.StatusType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_mapping(t_uint256,t_bool)))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => mapping(uint256 => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint32,t_struct(Loan)12099_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct ILoanCoordinator.Loan)",
        "numberOfBytes": "32",
        "value": "t_struct(Loan)12099_storage"
      },
      "t_struct(Loan)12099_storage": {
        "encoding": "inplace",
        "label": "struct ILoanCoordinator.Loan",
        "members": [
          {
            "astId": 12093,
            "contract": "contracts/loans/LoanCoordinator.sol:LoanCoordinator",
            "label": "loanContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12095,
            "contract": "contracts/loans/LoanCoordinator.sol:LoanCoordinator",
            "label": "smartNftId",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 12098,
            "contract": "contracts/loans/LoanCoordinator.sol:LoanCoordinator",
            "label": "status",
            "offset": 28,
            "slot": "0",
            "type": "t_enum(StatusType)12091"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}